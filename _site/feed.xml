<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="https://curtisnewbie.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://curtisnewbie.github.io/" rel="alternate" type="text/html" /><updated>2025-02-10T18:15:14+08:00</updated><id>https://curtisnewbie.github.io/feed.xml</id><title type="html">kekw</title><subtitle>Til the end</subtitle><author><name>Yongjie Zhuang</name></author><entry><title type="html">Innodb Internals</title><link href="https://curtisnewbie.github.io/learning/2025/02/08/innodb-internals.html" rel="alternate" type="text/html" title="Innodb Internals" /><published>2025-02-08T09:00:00+08:00</published><updated>2025-02-08T09:00:00+08:00</updated><id>https://curtisnewbie.github.io/learning/2025/02/08/innodb-internals</id><content type="html" xml:base="https://curtisnewbie.github.io/learning/2025/02/08/innodb-internals.html"><![CDATA[<blockquote>
  <p>This post documents stuff about InnoDB, it’s meant for me to recall all the details that I may have forgetten over the years. It’s not a complete guide to MySQL or InnoDB.</p>
</blockquote>

<h2 id="1-sources">1. Sources</h2>

<ul>
  <li><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-introduction.html">MySQL 8.0 - InnoDB Introduction</a></li>
</ul>

<h2 id="2-basics">2. Basics</h2>

<ul>
  <li>Durability and Recovery, based on WAL (Binlog, Redo Log) and the Doublewrite Buffer.</li>
  <li>Large Buffer Pool for caching, improve processing speed (linked list of data pages using LRU algorithm).</li>
  <li>Change Buffer (also called Insert Buffer, part of the Buffer Pool) for optimizing write operations, cache changes to secondary indexes.</li>
  <li>Adaptive Hash Index (in Buffer Pool) for fast table lookup.</li>
  <li>Clustered Index and Secondary Index.</li>
  <li>Support Data Page Checksum.</li>
  <li>Online DDL (since 8.0).</li>
  <li>Monitor internals and performance through <code class="language-plaintext highlighter-rouge">INFORMATION_SCHEMA</code> and <code class="language-plaintext highlighter-rouge">PERFORMANCE_SCHEMA</code>.</li>
</ul>

<h4 id="commands">Commands</h4>

<p>Check engines available, check if InnoDB is the default engine.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SHOW</span> <span class="n">ENGINES</span><span class="p">;</span>

<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">INFORMATION_SCHEMA</span><span class="p">.</span><span class="n">ENGINES</span><span class="p">;</span>
</code></pre></div></div>

<p>Check InnoDB Status:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SHOW ENGINE INNODB STATUS
</code></pre></div></div>

<h4 id="acid">ACID</h4>

<p>InnoDB complies with ACID model (not 100%, but almost, there can be Phantom Read in certain corner cases):</p>

<ul>
  <li>A: Atomicity
    <ul>
      <li>Transaction / Grouped Transaction, e.g., BEGIN, COMMIT, ROLLBACK</li>
    </ul>
  </li>
  <li>C: Consistency
    <ul>
      <li>WAL, Doublewrite Buffer</li>
    </ul>
  </li>
  <li>I: Isolation
    <ul>
      <li>Transaction Isolation
        <ul>
          <li><code class="language-plaintext highlighter-rouge">READ UNCOMMITED</code></li>
          <li><code class="language-plaintext highlighter-rouge">READ COMMITED</code></li>
          <li><code class="language-plaintext highlighter-rouge">REPEATABLE READ</code></li>
          <li><code class="language-plaintext highlighter-rouge">SERIALIZABLE</code></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>D: Durability
    <ul>
      <li>WAL (logs and the <code class="language-plaintext highlighter-rouge">innodb_flush_log_at_trx_commit</code> config), Doublewrite Buffer</li>
    </ul>
  </li>
</ul>

<h2 id="3-mvcc-multi-versioning-concurrency-control">3. MVCC Multi-Versioning Concurrency Control</h2>

<p>InnoDB supports concurrent transactions using various locks and MVCC. MVCC stands for Multi-Version Concurrency Control, it’s mainly used to optimize Read operations, supporting Transaction Isolation and Read Consistency without using extra locks, though certain features in MVCC also help Transaction Rollback.</p>

<p>The core concept that MVCC introduces is the versioning / snapshoting data (rows). With MVCC, InnoDB keeps multiple snapshot of the same row. As rows are created, modified or deleted, all these relevent snapshots are kept in place to support the Consistent View.</p>

<p>Each transaction is associated with a version, and each transaction can <em>“only”</em> see the snapshots that were created during or before the transaction (not including <code class="language-plaintext highlighter-rouge">READ UNCOMMITED</code> of course). In certain Isolation Level, e.g., <code class="language-plaintext highlighter-rouge">REPEATABLE READ</code>, transactions always see the same snapshot of data since the begining of the transaction as if the rows are never modified.</p>

<h4 id="innodb-mvcc-implementation">InnoDB MVCC Implementation</h4>

<p>InnoDB add three fields to each row:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">DB_TRX_ID</code>: 6 byte field to indicate the last transaction_id that inserted or updated the row. Deletion is also treated as an update to a special bit in row that is marked as deleted.</li>
  <li><code class="language-plaintext highlighter-rouge">DB_ROLL_PTR</code>: 7 byte field that points to a undo log record written to the rollback segment. Undo log record contains information about the row before it was updated.</li>
  <li><code class="language-plaintext highlighter-rouge">DB_ROW_ID</code>: 6 byte field that contains a row id, if the table DDL doesn’t specify the primary key for clustered index, then this field is not used.</li>
</ul>

<p>Undo logs are divided into insert and update undo logs:</p>

<ul>
  <li>Insert Undo Logs:
    <ul>
      <li>records inserted</li>
    </ul>
  </li>
  <li>Update Undo Logs:
    <ul>
      <li>records updated</li>
      <li>records deleted</li>
    </ul>
  </li>
</ul>

<p>Insert Undo Logs are only used to rollback transaction for the newly inserted rows, as soon as the transaction is commited, engine is freee to delete the Insert Undo Logs.</p>

<p>Update Undo Logs are used to build a snapshot of data for earlier versions. Rows deletion is implemented through fliping a special bit on each row, so row deletion is essentially the same as row updation. Update Undo Logs are kept until no transaction can build a consistent view for the associated snapshots of rows.</p>

<p>Each transaction is assigned to a transaction_id since the beginning of the transaction, and the transaction_id increases monotonically. At any moment, InnoDB knows what the minimum transaction_id is and thus can purge undo logs built by transactions prior to the minimum transaction_id. In InnoDB, rows are modified in place, so transaction either reads rows directly (e.g., if the rows are not modified or modified within the transaction) or builds snapshot based on the row data and the undo logs.</p>

<p>If transactions do not commit, the associated Undo Logs cannot be purged. Recall that Rows Deletion is implemented by fliping a special bit on the row, which means that the rows deleted are not immediately, physically removed from the database, they are still visible to transactions that have certain transaction_ids. These deleted rows are only physically purged (including indexes) when the associated Undo Logs are purged, which simply means that they are nolonger visible to any transcation. Rows are physically purged by a background thread called <code class="language-plaintext highlighter-rouge">Purge Thread</code>.</p>

<p>E.g.,</p>

<!--

Tx -> InnoDB: query rows
InnoDB -> Storage: locate rows, check deletion mark, compare trx_id
Storage -> InnoDB: Undo Log ROLL_PTR
InnoDB -> Undo Log (Buffer Pool): compare trx_id, build snapshot
Undo Log (Buffer Pool) -> Undo Log (Disk): cache miss
InnoDB -> Tx: rows (visible snapshots)

-->

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ┌──┐                   ┌──────┐                                        ┌───────┐┌──────────────────────┐┌───────────────┐
 │Tx│                   │InnoDB│                                        │Storage││Undo Log (Buffer Pool)││Undo Log (Disk)│
 └┬─┘                   └──┬───┘                                        └───┬───┘└──────────┬───────────┘└───────┬───────┘
  │                        │                                                │               │                    │
  │       query rows       │                                                │               │                    │
  │───────────────────────&gt;│                                                │               │                    │
  │                        │                                                │               │                    │
  │                        │locate rows, check deletion mark, compare trx_id│               │                    │
  │                        │───────────────────────────────────────────────&gt;│               │                    │
  │                        │                                                │               │                    │
  │                        │               Undo Log ROLL_PTR                │               │                    │
  │                        │&lt;───────────────────────────────────────────────│               │                    │
  │                        │                                                │               │                    │
  │                        │                 compare trx_id, build snapshot │               │                    │
  │                        │───────────────────────────────────────────────────────────────&gt;│                    │
  │                        │                                                │               │                    │
  │                        │                                                │               │     cache miss     │
  │                        │                                                │               │───────────────────&gt;│
  │                        │                                                │               │                    │
  │rows (visible snapshots)│                                                │               │                    │
  │&lt;───────────────────────│                                                │               │                    │
 ┌┴─┐                   ┌──┴───┐                                        ┌───┴───┐┌──────────┴───────────┐┌───────┴───────┐
 │Tx│                   │InnoDB│                                        │Storage││Undo Log (Buffer Pool)││Undo Log (Disk)│
 └──┘                   └──────┘                                        └───────┘└──────────────────────┘└───────────────┘

</code></pre></div></div>

<h4 id="secondary-index">Secondary Index</h4>

<p>In Clustered Index, rows are updated in-place, historical snapshots are built by reading undo logs that the <code class="language-plaintext highlighter-rouge">DB_ROLL_PTR</code> points to. However, in Secondary Index, modified index records are always marked deleted, and new index records (the updated ones) are always inserted. So, physically, a Secondary Index Tree can contain duplicate index key values (for MVCC), even though the Secondary Index has Unique Constraint.</p>

<p>When InnoDB reads Secondary Index, in following circumstances, Convering Index Technique is not used:</p>

<ul>
  <li>Secondary Index Record is marked deleted.</li>
  <li>Secondary Index Page is updated by a newer transaction.</li>
</ul>

<p>In these cases, InnoDB performs normal table lookup on Clustered Index and Undo Logs, even though all columns are convered by the Secondary Index.</p>

<p>Since it’s very likely that transactions need to read Clustered Index and Undo Logs to build snapshots, InnoDB optimize these operations by caching the Data Pages and Undo Log Pages using LRU algorithm. Then, for frequently accessed data (including the Undo Logs), the data look up might be performed completely in momery.</p>

<h2 id="4-innodb-architecture">4. InnoDB Architecture</h2>

<p><img height="500px" src="https://dev.mysql.com/doc/refman/8.0/en/images/innodb-architecture-8-0.png" /></p>

<blockquote>
  <p>image source: https://dev.mysql.com/doc/refman/8.0/en/innodb-architecture.html</p>
</blockquote>

<ul>
  <li>In-Memory
    <ul>
      <li>Buffer Pool</li>
      <li>Change Buffer</li>
      <li>Adaptive Hash Index</li>
      <li>Log Buffer</li>
    </ul>
  </li>
  <li>On-Disk
    <ul>
      <li>Tables</li>
      <li>Indexes</li>
      <li>Tablespaces</li>
      <li>Doublewrite Buffer</li>
      <li>Redo Logs</li>
      <li>Undo Logs</li>
    </ul>
  </li>
</ul>

<h4 id="in-memory-buffer-pool">In-Memory Buffer Pool</h4>

<p>Buffer Pool caches frequently accessed table and index data (including both the index pages, data pages and Secondary Index pages), up to 80% of the physically memory is often assigned to this memory area. In Buffer Pool, data are divided into pages (just like the tables on disk), these pages are maintained using a linked list and LRU (Least Recently Used) algorithm.</p>

<p><img height="400px" src="https://dev.mysql.com/doc/refman/8.0/en/images/innodb-buffer-pool-list.png" /></p>

<blockquote>
  <p>image source: https://dev.mysql.com/doc/refman/8.0/en/innodb-buffer-pool.html</p>
</blockquote>

<p>The linked list is divided into two sublist, one named <code class="language-plaintext highlighter-rouge">New Sublist</code> that stores pages recently accessed, and another named <code class="language-plaintext highlighter-rouge">Old Sublist</code> that stores pages that were accessed less recently.</p>

<p>The head is the <code class="language-plaintext highlighter-rouge">New Sublist</code> with the most recently access pages, and the tail is the <code class="language-plaintext highlighter-rouge">Old Sublist</code> with the least recently access pages. By dault, 3/8 of the pool is assigned to the <code class="language-plaintext highlighter-rouge">Old Sublist</code> and the remaining 5/8 is assigned to <code class="language-plaintext highlighter-rouge">New Sublist</code>.</p>

<p>New Pages are inserted at the midpoint of the list (the head of the <code class="language-plaintext highlighter-rouge">Old Sublist</code>). As pages on the list are accessed, they are moved to the head of the list (also the head of the <code class="language-plaintext highlighter-rouge">New Sublist</code>), making them <em>“young”</em>. Then, naturally, the pages that are less recently accessed are moved towards the end the list as other pages are moved to the head of the list. This process is called aging.</p>

<p>If a page is never accessed, eventually, it will be moved to the tail of the linked list and then get evicted.</p>

<p>So, in essence, the Buffer Pool should be made as large as possible. Though a full table scan for a large table may easily break the Buffer Pool Cache.</p>

<p>Use <code class="language-plaintext highlighter-rouge">'SHOW ENGINE INNODB STATUS'</code> to check InnoDB Engine Status, About the Buffer Pool metrics: <a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-buffer-pool.html">https://dev.mysql.com/doc/refman/8.0/en/innodb-buffer-pool.html</a>.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SHOW ENGINE INNODB STATUS

<span class="c"># ----------------------</span>
<span class="c"># BUFFER POOL AND MEMORY</span>
<span class="c"># ----------------------</span>
<span class="c"># Total large memory allocated 0</span>
<span class="c"># Dictionary memory allocated 24475827</span>
<span class="c"># Buffer pool size   196539</span>
<span class="c"># Free buffers       4096</span>
<span class="c"># Database pages     192443</span>
<span class="c"># Old database pages 70873</span>
<span class="c"># Modified db pages  1559</span>
<span class="c"># Pending reads      0</span>
<span class="c"># Pending writes: LRU 0, flush list 0, single page 0, flush chunk 0</span>
<span class="c"># Pages made young 316623327, not young 477690611</span>
<span class="c"># 23.70 youngs/s, 64.04 non-youngs/s</span>
<span class="c"># Pages read 9309080, created 7809533, written 125995449</span>
<span class="c"># 3.89 reads/s, 0.71 creates/s, 7.84 writes/s</span>
<span class="c"># Buffer pool hit rate 1000 / 1000, young-making rate 0 / 1000 not 2 / 1000</span>
<span class="c"># Pages read ahead 0.00/s, evicted without access 0.00/s, Random read ahead 0.00/s</span>
<span class="c"># LRU len: 192443, unzip_LRU len: 0</span>
<span class="c"># I/O sum[4248]:cur[64], unzip sum[0]:cur[0]</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Total large memory allocated</code> can be 0 if Buffer Pool Size is very large:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SHOW</span> <span class="n">VARIABLES</span> <span class="k">LIKE</span> <span class="s1">'innodb_buffer_pool_size'</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="in-memory-change-buffer">In-Memory Change Buffer</h4>

<p>Change Buffer caches changes to (Non-Unique) Secondary Index Pages if the page is not cached in Buffer Pool. If the index page is already cached in Buffer Pool, the changes can be applied directly to that cached page.</p>

<p>It’s for the Secondary Index, thus doesn’t contain actual rows and columns that are modified by transactions. Think of it as a cache created exclusively for Secondary Index Pages, while the Buffer Pool is a cache for both data and index pages (including Secondary Index).</p>

<p><img height="300px" src="https://dev.mysql.com/doc/refman/8.0/en/images/innodb-change-buffer.png" /></p>

<blockquote>
  <p>image source: https://dev.mysql.com/doc/refman/8.0/en/innodb-change-buffer.html</p>
</blockquote>

<p>Change Buffer is periodically merged into Buffer Pool, since Buffer Pool caches all kinds of table and index data. This is primary to prevent substantial random access I/O while updating the Secondary Index on disk.</p>

<p>When a query needs to access data from Secondary Index Pages, InnoDB traverses the Secondary Index Tree, read the Buffer Pool cache (Read-Through Stragtegy) and load index pages from disk if necessary. While InnoDB reading the Secondary Index, it merges the pending changes in Change Buffer into the loaded Secondary Index Pages such that the not yet persisted changes to the Secondary Index are still visible.</p>

<p>In fact, same optimization strategy is also used for updating rows, where the newly updated rows are cached in Buffer Pool, and are periodically merged to disk by background threads. This way, write operations are less frequently performed, and some of content are written sequentially if the modified data resides in the same page. InnoDB can choose to merge Buffer Pool and Change Buffer when the server is nearly idle.</p>

<p>Incrase size of Change Buffer if there are lots of Secondary Indexses, but Change Buffer is part of the Buffer Pool thus may occupy some of the space, we may well just incrase size of both of them. By dault, Change Buffer at most occupies 25% of the space of Buffer Pool.</p>

<p>To check the status of Change Buffer:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SHOW ENGINE INNODB STATUS

<span class="c"># -------------------------------------</span>
<span class="c"># INSERT BUFFER AND ADAPTIVE HASH INDEX</span>
<span class="c"># -------------------------------------</span>
<span class="c"># Ibuf: size 1, free list len 695, seg size 697, 43022 merges</span>
<span class="c"># merged operations:</span>
<span class="c">#  insert 62803, delete mark 4411134, delete 45335</span>
<span class="c"># discarded operations:</span>
<span class="c">#  insert 0, delete mark 0, delete 0</span>
<span class="c"># Hash table size 103, node heap has 0 buffer(s)</span>
<span class="c"># Hash table size 103, node heap has 0 buffer(s)</span>
<span class="c"># Hash table size 103, node heap has 0 buffer(s)</span>
<span class="c"># Hash table size 103, node heap has 0 buffer(s)</span>
<span class="c"># Hash table size 103, node heap has 0 buffer(s)</span>
<span class="c"># Hash table size 103, node heap has 0 buffer(s)</span>
<span class="c"># Hash table size 103, node heap has 0 buffer(s)</span>
<span class="c"># Hash table size 103, node heap has 0 buffer(s)</span>
<span class="c"># 0.00 hash searches/s, 1076.91 non-hash searches/s</span>
</code></pre></div></div>

<h4 id="in-memory-adaptive-hash-index">In-Memory Adaptive Hash Index</h4>

<p>Adaptive Hash Index is for speeding up index lookup (both Clustered Index and Secondary Index). It’s adaptive in that it monitors index searches, if it believes that building a hash structure for indexes can greatly improve query performance, it will create such data structure in memory (as part of Buffer Pool), trying to turn B+ Tree traversal to hash-based key-value lookup.</p>

<p>AHI is built using a prefix of the index key. AHI is built on demand only for the pages are frequently accessed.</p>

<p>For example, in a typical JOIN operation: <code class="language-plaintext highlighter-rouge">table_a JOIN table_b ON col_j</code></p>

<p>We have the following Nested Loop Join:</p>

<pre>
<b>FOR</b> ptr_a <b>IN</b> table_a:
    <b>WALK</b> table_b <b>FIND</b> ptr_a.col_j <b>AS</b> ptr_b:       <i style="color: green"># Traverse table_b's index tree</i>
        <b>YIELD</b> ptr_b
<b>END</b>
</pre>

<p>Which can be optimized with Adaptive Hash Index like the following:</p>

<pre>
<b>FOR</b> ptr_a <b>IN</b> table_a:
    ptr_B, ok = <span style="color: blue">HASH_FIND(</span> table_b, ptr_a.col_j <span style="color: blue">)</span> <i style="color: green"># Adaptive Hash Index Lookup</i>
    <b>IF</b> ok:                                        <i style="color: green"># Cache Hit</i>
        <b>YIELD</b> ptr_b
    <b>ELSE</b>:                                         <i style="color: green"># Cache Miss</i>
        <b>WALK</b> table_b <b>FIND</b> ptr_a.col_j <b>AS</b> ptr_b:   <i style="color: green"># Traverse table_b's index tree</i>
            <b>YIELD</b> ptr_b
<b>END</b>
</pre>

<p>Adaptive Hash Index can also be a source of contention under heavy workloads, e.g., concurrent joins. In certain cases, AHI isn’t very useful, e.g., range scans.</p>

<h4 id="in-memory-log-buffer-redo-log">In-Memory Log Buffer (Redo Log)</h4>

<p>Log Buffer contains Redo Log file data that has not yet been written to disk. By default, Log Buffer’s size is 16 MB. The contents of the Log Buffer is periodically flushed to disk (based on configuration).</p>

<p>Variable <code class="language-plaintext highlighter-rouge">innodb_flush_log_at_trx_commit</code> controls when logs are written and flushed to disk, and <code class="language-plaintext highlighter-rouge">innodb_flush_log_at_timeout</code> controls log flushing frequency.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>show variables like <span class="s1">'innodb_flush_log%'</span><span class="p">;</span>

<span class="c"># +--------------------------------+-------+</span>
<span class="c"># | Variable_name                  | Value |</span>
<span class="c"># +--------------------------------+-------+</span>
<span class="c"># | innodb_flush_log_at_timeout    | 1     |</span>
<span class="c"># | innodb_flush_log_at_trx_commit | 1     |</span>
<span class="c"># +--------------------------------+-------+</span>
</code></pre></div></div>

<p>Options available for variable <code class="language-plaintext highlighter-rouge">innodb_flush_log_at_trx_commit</code> :</p>

<ul>
  <li>0: written and flushed once per second</li>
  <li>1: wriiten and flushed at transaction commit (<strong>default</strong>)</li>
  <li>2: written at transaction commit and flushed once per second</li>
</ul>

<p>Variable <code class="language-plaintext highlighter-rouge">innodb_flush_log_at_timeout</code>, defaults to 1, controls how frequent the Log Buffer is written and flushed: <em>“write and flush logs every N seconds”</em>.</p>]]></content><author><name>Yongjie Zhuang</name></author><category term="Learning" /><summary type="html"><![CDATA[This post documents stuff about InnoDB, it’s meant for me to recall all the details that I may have forgetten over the years. It’s not a complete guide to MySQL or InnoDB.]]></summary></entry><entry><title type="html">CA, SSL/TLS Certificate Basic</title><link href="https://curtisnewbie.github.io/learning/2025/02/07/ca-ssltls-certificate-basic.html" rel="alternate" type="text/html" title="CA, SSL/TLS Certificate Basic" /><published>2025-02-07T09:00:00+08:00</published><updated>2025-02-07T09:00:00+08:00</updated><id>https://curtisnewbie.github.io/learning/2025/02/07/ca-ssltls-certificate-basic</id><content type="html" xml:base="https://curtisnewbie.github.io/learning/2025/02/07/ca-ssltls-certificate-basic.html"><![CDATA[<h2 id="1-ca-and-ssltls-certificates">1. CA and SSL/TLS Certificates</h2>

<p>CA stands for Certificate Authority. CA certificates usually refer to the digital certificates issued by CAs, the trusted entities, sometime we call these certificates “the root certificates”.</p>

<p>The SSL/TLS certificates are mainly used to help us verify the identities of the servers that we are connecting to, but the certificates do not contain any IP addresses, only the domain name and other related information (e.g., about the organization and so on).</p>

<p>DNS server resolves the IPs for the provided domain name, and the resolution happens before SSL/TLS connection. If the DNS server is hijacked, then SSL/TLS doesn’t protect the clients, since the hijacked DNS servers may have already redirected the client to a fake server before the SSL/TLS handshake.</p>

<p>Given that DNS server is not hijacked, the SSL/TLS certificates installed on the servers (the website) can be used to verify the identity of the domain name. Since the DNS server provides valid IPs for the domain name, we can be sure that we are connecting to the trusted servers for the website. In other words, SSL/TLS certificates protect the domain name(s).</p>

<h2 id="2-how-ca-certificates-help">2. How CA Certificates Help?</h2>

<p>Recall that CAs are the trusted entities, and CA certificates are signed and issued by CAs using private key. With RSA, private key is used to generate digital signature (i.e., signing stuff) and public key is used to verify the digital signature.</p>

<p>Almost all OSs or some programming language runtimes (e.g., Java bundles the root CAs certificates in its runtime) maintain a list of trusted, root CAs certificates.</p>

<p>When clients connect to servers, during the SSL/TLS handshake, the servers send the installed SSL/TLS certificates to the clients. Clients then examine the certificate and identify the CA that issued it.</p>

<p>Since clients have a list of trusted CA certificates (e.g., from the OS), clients can use the public key in CA certificates to verify the certificates provided by the server, which is essentially using the public key to verify the digital signature on it. If the digital signature is valid and the certificate has not yet expired, then the certificate is trustworthy.</p>

<p>So, you may have wondered, if the OS or the programming language runtime are really outdated, they may not contain all the CA certificates. In which case, they may fail to verify the SSL/TLS certificates provided by the server even though they are valid.</p>

<h2 id="3-chain-of-certificates">3. Chain of Certificates</h2>

<p>Chain of certificates is used to reduce the number of root CAs, it just simply means that there are multiple certificates in the chain, and each certificate is issued by the one before it, thus it’s called a chain, not a list.</p>

<p>The ones in the middle of the chain is called intermediate certificate. These certificates are usually issued by entities that also issue SSL/TLS certificates. Intermediate certificates are just like normal SSL/TLS certificates, they are also verified by another certificate that issued them. The entities that issue intermediate certificates are called Intermediate CAs or Sub CAs.</p>

<p>When a website’s certificate is issued by a intermediate CA not directly from a root CA, the website should install the chain of certificates on its servers such that when a client undertake SSL/TLS handshake with the server, the server replies the whole chain to the client (not just the one its domain name), and then the client can verify each certificate on the chain until the root CAs that the client alreay knew.</p>

<p>Below is a simple visualization for the logic behind.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Root CA Certificates]
            ^
            |
            | verified using root CA certificate's public key
            |
            |
[Intermediate Certificates]
            ^
            |
            | verified using intermediate CA certificate's public key
            |
            |
[Domain Certificate - The Website]
</code></pre></div></div>

<p>So, what might go wrong when using chain of certificates? If the server’s domain certificate is not signed by any known root CA certificate, and the intermediate certificates on the chain are not provided to the client, then the client will simply not be able to verify the domain certificate, it doesn’t even know which root CA certificate this chain roots from.</p>

<p>A classic issue with intermediate certificates is that the web server misconfigures the chain of certificate, wherein the intermediate certificates are not provided to the clients, the client is unable to valid the domain certificate. The solution to this problem is either letting the client install the intermediate certificates or fix the certificate chain configuration.</p>

<p>The post <a href="/learning/2025/01/16/fix-jdk-ca-certificates">“2025-01-16 Fix JDK CA Certificates”</a> is an example of installing the certificates on the client side, which is the last resort for fixing the SSL/TLS certificate problems.</p>

<h2 id="4-commands-for-certificates">4. Commands for Certificates</h2>

<h3 id="view-certificate-details">View Certificate Details</h3>

<p>Use following command to read the certificate file’s content.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl x509 <span class="nt">-text</span> <span class="nt">-in</span> <span class="s2">"***.crt"</span>
</code></pre></div></div>

<h3 id="view-certificate-signature">View Certificate Signature</h3>

<p>Use following command to read certificate signature in sha256 / sha1 format, the command above also displays the signature, though they look slightly different.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl x509 <span class="nt">-noout</span> <span class="nt">-fingerprint</span> <span class="nt">-sha256</span> <span class="nt">-in</span> <span class="s2">"***.crt"</span><span class="p">;</span>
openssl x509 <span class="nt">-noout</span> <span class="nt">-fingerprint</span> <span class="nt">-sha1</span> <span class="nt">-in</span> <span class="s2">"***.crt"</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="fetch-chain-of-certificates">Fetch Chain of Certificates</h3>

<p>Credit: https://unix.stackexchange.com/questions/368123/how-to-extract-the-root-ca-and-subordinate-ca-from-a-certificate-chain-in-linux</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function </span>root_cert<span class="o">()</span> <span class="o">{</span>
    openssl s_client <span class="nt">-showcerts</span> <span class="nt">-verify</span> 10 <span class="nt">-connect</span> <span class="nv">$1</span>:443 <span class="o">&gt;</span> /dev/null
<span class="o">}</span>

<span class="k">function </span>scrape_all_cert<span class="o">()</span> <span class="o">{</span>
    openssl s_client <span class="nt">-showcerts</span> <span class="nt">-verify</span> 10 <span class="nt">-connect</span> <span class="nv">$1</span>:443 &lt; /dev/null |
    <span class="nb">awk</span> <span class="s1">'/BEGIN CERTIFICATE/,/END CERTIFICATE/{ if(/BEGIN CERTIFICATE/){a++}; out="cert"a".pem"; print &gt;out}'</span>
    <span class="nv">i</span><span class="o">=</span>0
    <span class="nb">echo</span> <span class="s2">""</span>
    <span class="k">for </span>cert <span class="k">in</span> <span class="k">*</span>.pem<span class="p">;</span> <span class="k">do
            </span><span class="nv">newname</span><span class="o">=</span><span class="si">$(</span>openssl x509 <span class="nt">-noout</span> <span class="nt">-subject</span> <span class="nt">-in</span> <span class="nv">$cert</span> | <span class="nb">sed</span> <span class="nt">-nE</span> <span class="s1">'s/.*CN ?= ?(.*)/\1/; s/[ ,.*]/_/g; s/__/_/g; s/_-_/-/; s/^_//g;p'</span> | <span class="nb">tr</span> <span class="s1">'[:upper:]'</span> <span class="s1">'[:lower:]'</span><span class="si">)</span>.pem
            <span class="nb">echo</span> <span class="s2">"- </span><span class="k">${</span><span class="nv">i</span><span class="k">}</span><span class="s2"> /tmp/</span><span class="k">${</span><span class="nv">newname</span><span class="k">}</span><span class="s2">"</span>
            <span class="nb">mv</span> <span class="s2">"</span><span class="nv">$cert</span><span class="s2">"</span> <span class="s2">"/tmp/</span><span class="k">${</span><span class="nv">newname</span><span class="k">}</span><span class="s2">"</span>
            <span class="nv">i</span><span class="o">=</span><span class="k">$((</span>i+1<span class="k">))</span>
    <span class="k">done</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="5-more">5. More</h2>

<ul>
  <li>https://stackoverflow.com/questions/40061263/what-is-ca-certificate-and-why-do-we-need-it</li>
  <li>https://www.cloudflare.com/learning/ssl/how-does-ssl-work/</li>
  <li>https://www.keyfactor.com/blog/what-is-a-certificate-signing-request-csr/</li>
</ul>]]></content><author><name>Yongjie Zhuang</name></author><category term="Learning" /><summary type="html"><![CDATA[1. CA and SSL/TLS Certificates]]></summary></entry><entry><title type="html">Fix JDK CA Certificates</title><link href="https://curtisnewbie.github.io/learning/2025/01/16/fix-jdk-ca-certificates.html" rel="alternate" type="text/html" title="Fix JDK CA Certificates" /><published>2025-01-16T19:00:00+08:00</published><updated>2025-01-16T19:00:00+08:00</updated><id>https://curtisnewbie.github.io/learning/2025/01/16/fix-jdk-ca-certificates</id><content type="html" xml:base="https://curtisnewbie.github.io/learning/2025/01/16/fix-jdk-ca-certificates.html"><![CDATA[<p>Java internally maintain a list of CA certificates. These CA certificates are shipped with the JDK installed.</p>

<p>These CA certificates are usually stored at following locations:</p>

<ul>
  <li>Recent JDK Versions: <code class="language-plaintext highlighter-rouge">$JAVA_HOME/lib/security/cacerts</code></li>
  <li>Older JDK Versions:<code class="language-plaintext highlighter-rouge">$JAVA_HOME/jre/lib/security/cacerts</code></li>
</ul>

<p>For example, on MacOS:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash<span class="nv">$ </span>file <span class="nv">$JAVA_HOME</span>/jre/lib/security/cacerts

/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home//jre/lib/security/cacerts: Java KeyStore
</code></pre></div></div>

<p>This file is in binary format, you cannot edit the file directly.</p>

<p>When your JDK version is outdated, the CA certificates that come with the JDK are also outdated. Your HTTP client code may fail to request a website with valid SSL certificate.</p>

<p>You may see exception stacktrace like the following:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">javax</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">SSLHandshakeException</span><span class="o">:</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">validator</span><span class="o">.</span><span class="na">ValidatorException</span><span class="o">:</span> <span class="no">PKIX</span> <span class="n">path</span> <span class="n">building</span> <span class="nl">failed:</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">provider</span><span class="o">.</span><span class="na">certpath</span><span class="o">.</span><span class="na">SunCertPathBuilderException</span><span class="o">:</span> <span class="n">unable</span> <span class="n">to</span> <span class="n">find</span> <span class="n">valid</span> <span class="n">certification</span> <span class="n">path</span> <span class="n">to</span> <span class="n">requested</span> <span class="n">target</span>
	<span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">Alert</span><span class="o">.</span><span class="na">createSSLException</span><span class="o">(</span><span class="nc">Alert</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">131</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">TransportContext</span><span class="o">.</span><span class="na">fatal</span><span class="o">(</span><span class="nc">TransportContext</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">377</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">TransportContext</span><span class="o">.</span><span class="na">fatal</span><span class="o">(</span><span class="nc">TransportContext</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">320</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">TransportContext</span><span class="o">.</span><span class="na">fatal</span><span class="o">(</span><span class="nc">TransportContext</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">315</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">CertificateMessage</span><span class="n">$T13CertificateConsumer</span><span class="o">.</span><span class="na">checkServerCerts</span><span class="o">(</span><span class="nc">CertificateMessage</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1355</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">CertificateMessage</span><span class="n">$T13CertificateConsumer</span><span class="o">.</span><span class="na">onConsumeCertificate</span><span class="o">(</span><span class="nc">CertificateMessage</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1230</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">CertificateMessage</span><span class="n">$T13CertificateConsumer</span><span class="o">.</span><span class="na">consume</span><span class="o">(</span><span class="nc">CertificateMessage</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1173</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">SSLHandshake</span><span class="o">.</span><span class="na">consume</span><span class="o">(</span><span class="nc">SSLHandshake</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">376</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">HandshakeContext</span><span class="o">.</span><span class="na">dispatch</span><span class="o">(</span><span class="nc">HandshakeContext</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">479</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">HandshakeContext</span><span class="o">.</span><span class="na">dispatch</span><span class="o">(</span><span class="nc">HandshakeContext</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">457</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">TransportContext</span><span class="o">.</span><span class="na">dispatch</span><span class="o">(</span><span class="nc">TransportContext</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">200</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">SSLTransport</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="nc">SSLTransport</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">155</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">SSLSocketImpl</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="nc">SSLSocketImpl</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1320</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">SSLSocketImpl</span><span class="o">.</span><span class="na">readHandshakeRecord</span><span class="o">(</span><span class="nc">SSLSocketImpl</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1233</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">SSLSocketImpl</span><span class="o">.</span><span class="na">startHandshake</span><span class="o">(</span><span class="nc">SSLSocketImpl</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">417</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">ssl</span><span class="o">.</span><span class="na">SSLSocketImpl</span><span class="o">.</span><span class="na">startHandshake</span><span class="o">(</span><span class="nc">SSLSocketImpl</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">389</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">okhttp3</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">connection</span><span class="o">.</span><span class="na">RealConnection</span><span class="o">.</span><span class="na">connectTls</span><span class="o">(</span><span class="nc">RealConnection</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">336</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">okhttp3</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">connection</span><span class="o">.</span><span class="na">RealConnection</span><span class="o">.</span><span class="na">establishProtocol</span><span class="o">(</span><span class="nc">RealConnection</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">300</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">okhttp3</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">connection</span><span class="o">.</span><span class="na">RealConnection</span><span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="nc">RealConnection</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">185</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">okhttp3</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">connection</span><span class="o">.</span><span class="na">ExchangeFinder</span><span class="o">.</span><span class="na">findConnection</span><span class="o">(</span><span class="nc">ExchangeFinder</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">224</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">okhttp3</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">connection</span><span class="o">.</span><span class="na">ExchangeFinder</span><span class="o">.</span><span class="na">findHealthyConnection</span><span class="o">(</span><span class="nc">ExchangeFinder</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">108</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">okhttp3</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">connection</span><span class="o">.</span><span class="na">ExchangeFinder</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">ExchangeFinder</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">88</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">okhttp3</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">connection</span><span class="o">.</span><span class="na">Transmitter</span><span class="o">.</span><span class="na">newExchange</span><span class="o">(</span><span class="nc">Transmitter</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">169</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">okhttp3</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">connection</span><span class="o">.</span><span class="na">ConnectInterceptor</span><span class="o">.</span><span class="na">intercept</span><span class="o">(</span><span class="nc">ConnectInterceptor</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">41</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">okhttp3</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">RealInterceptorChain</span><span class="o">.</span><span class="na">proceed</span><span class="o">(</span><span class="nc">RealInterceptorChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">142</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">okhttp3</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">RealInterceptorChain</span><span class="o">.</span><span class="na">proceed</span><span class="o">(</span><span class="nc">RealInterceptorChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">117</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">okhttp3</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">cache</span><span class="o">.</span><span class="na">CacheInterceptor</span><span class="o">.</span><span class="na">intercept</span><span class="o">(</span><span class="nc">CacheInterceptor</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">94</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">okhttp3</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">RealInterceptorChain</span><span class="o">.</span><span class="na">proceed</span><span class="o">(</span><span class="nc">RealInterceptorChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">142</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">okhttp3</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">RealInterceptorChain</span><span class="o">.</span><span class="na">proceed</span><span class="o">(</span><span class="nc">RealInterceptorChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">117</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">okhttp3</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">BridgeInterceptor</span><span class="o">.</span><span class="na">intercept</span><span class="o">(</span><span class="nc">BridgeInterceptor</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">93</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">okhttp3</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">RealInterceptorChain</span><span class="o">.</span><span class="na">proceed</span><span class="o">(</span><span class="nc">RealInterceptorChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">142</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">okhttp3</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">RetryAndFollowUpInterceptor</span><span class="o">.</span><span class="na">intercept</span><span class="o">(</span><span class="nc">RetryAndFollowUpInterceptor</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">88</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">okhttp3</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">RealInterceptorChain</span><span class="o">.</span><span class="na">proceed</span><span class="o">(</span><span class="nc">RealInterceptorChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">142</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">okhttp3</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">http</span><span class="o">.</span><span class="na">RealInterceptorChain</span><span class="o">.</span><span class="na">proceed</span><span class="o">(</span><span class="nc">RealInterceptorChain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">117</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">okhttp3</span><span class="o">.</span><span class="na">RealCall</span><span class="o">.</span><span class="na">getResponseWithInterceptorChain</span><span class="o">(</span><span class="nc">RealCall</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">229</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">okhttp3</span><span class="o">.</span><span class="na">RealCall</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="nc">RealCall</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">81</span><span class="o">)</span>
    <span class="o">...</span>
</code></pre></div></div>

<p>You can also verify the SSL issue if the OS’s CA certificates are also outdated, e.g., using cURL:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash# curl https://<span class="k">****</span> <span class="nt">-v</span>

<span class="k">*</span> Rebuilt URL to: https://<span class="k">***</span>/
<span class="k">*</span>   Trying <span class="k">***</span>.<span class="k">***</span>.<span class="k">***</span>.<span class="k">***</span>...
<span class="k">*</span> TCP_NODELAY <span class="nb">set</span>
<span class="k">*</span> Connected to <span class="k">***</span>.<span class="k">***</span>.<span class="k">***</span> <span class="o">(</span><span class="k">***</span>.<span class="k">***</span>.<span class="k">***</span><span class="o">)</span> port 443 <span class="o">(</span><span class="c">#0)</span>
<span class="k">*</span> ALPN, offering h2
<span class="k">*</span> ALPN, offering http/1.1
<span class="k">*</span> successfully <span class="nb">set </span>certificate verify locations:
<span class="k">*</span>   CAfile: /etc/pki/tls/certs/ca-bundle.crt
  CApath: none
<span class="k">*</span> TLSv1.3 <span class="o">(</span>OUT<span class="o">)</span>, TLS handshake, Client hello <span class="o">(</span>1<span class="o">)</span>:
<span class="k">*</span> TLSv1.3 <span class="o">(</span>IN<span class="o">)</span>, TLS handshake, Server hello <span class="o">(</span>2<span class="o">)</span>:
<span class="k">*</span> TLSv1.3 <span class="o">(</span>IN<span class="o">)</span>, TLS handshake, <span class="o">[</span>no content] <span class="o">(</span>0<span class="o">)</span>:
<span class="k">*</span> TLSv1.3 <span class="o">(</span>IN<span class="o">)</span>, TLS handshake, Encrypted Extensions <span class="o">(</span>8<span class="o">)</span>:
<span class="k">*</span> TLSv1.3 <span class="o">(</span>IN<span class="o">)</span>, TLS handshake, <span class="o">[</span>no content] <span class="o">(</span>0<span class="o">)</span>:
<span class="k">*</span> TLSv1.3 <span class="o">(</span>IN<span class="o">)</span>, TLS handshake, Certificate <span class="o">(</span>11<span class="o">)</span>:
<span class="k">*</span> TLSv1.3 <span class="o">(</span>OUT<span class="o">)</span>, TLS alert, unknown CA <span class="o">(</span>560<span class="o">)</span>:
<span class="k">*</span> SSL certificate problem: unable to get <span class="nb">local </span>issuer certificate
<span class="k">*</span> Closing connection 0
curl: <span class="o">(</span>60<span class="o">)</span> SSL certificate problem: unable to get <span class="nb">local </span>issuer certificate
More details here: https://curl.haxx.se/docs/sslcerts.html

curl failed to verify the legitimacy of the server and therefore could not
establish a secure connection to it. To learn more about this situation and
how to fix it, please visit the web page mentioned above.
</code></pre></div></div>

<p>You have three options to fix the CA certificates issue:</p>

<ol>
  <li>Fix CA Certificates of JDK (and OS)</li>
  <li>Configure Java HTTP Client to trust all certificates</li>
  <li>Upgrade JDK (only the minor version)</li>
</ol>

<p>Second option is not recommended, and third option is preferable but sometimes not possible (in your company).</p>

<p>In my case, I (have to) choose to first option; fixing the CA certificates by importing certificate PEM to JDK’s cacerts.</p>

<blockquote>
  <p>Assume that we trust the website’s existing certificates.</p>
</blockquote>

<p>First, we open the website using Chrome, open the website’s certificate details, and export the certificates. Notice that sometimes you not only need the top layer certificate, you also need the middle one, so you may end up exporting more than one <code class="language-plaintext highlighter-rouge">*.pem</code> certificate files.</p>

<p>We then fix OS’s CA certificates by copying the content of these exported certificate files to OS’s <code class="language-plaintext highlighter-rouge">*.crt</code> file. The location of the <code class="language-plaintext highlighter-rouge">*.crt</code> file really depends on which OS your are using.</p>

<p>E.g., in REHL, the OS’s certificates may be located at: <code class="language-plaintext highlighter-rouge">/etc/pki/tls/certs/ca-bundle.crt</code>, if you are using Ubuntu or something else, it will be different, just google it.</p>

<p>Once we have copied the exported certificates content to this <code class="language-plaintext highlighter-rouge">*.crt</code> file, the cURL should work normally. It at least proves that the certificates that we just exported are correct.</p>

<p>For JDK (or say JRE), we use the built-in JDK tools <code class="language-plaintext highlighter-rouge">keytool</code> to import the certificates, the command looks like the following:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>keytool <span class="nt">-import</span> <span class="nt">-storepass</span> changeit <span class="nt">-noprompt</span> <span class="nt">-trustcacerts</span> <span class="nt">-alias</span> my_exported_certificate_1 <span class="nt">-file</span> my_exported_1.crt <span class="nt">-keystore</span> <span class="nv">$JAVA_HOME</span>/jre/lib/security/cacerts

keytool <span class="nt">-import</span> <span class="nt">-storepass</span> changeit <span class="nt">-noprompt</span> <span class="nt">-trustcacerts</span> <span class="nt">-alias</span> my_exported_certificate_2 <span class="nt">-file</span> my_exported_2.crt <span class="nt">-keystore</span> <span class="nv">$JAVA_HOME</span>/jre/lib/security/cacerts
</code></pre></div></div>

<p>Notice that JDK’s cacerts by default use password <code class="language-plaintext highlighter-rouge">changeit</code>, so we just pass in the password using CLI arg <code class="language-plaintext highlighter-rouge">-storepass</code> without the prompt.</p>

<p>Since we may need to import mulitple certificates, you will need to run the <code class="language-plaintext highlighter-rouge">keytool</code> commands multiple times for each of these certificates, because <code class="language-plaintext highlighter-rouge">keytool</code> only supports importing one certificate at a time.</p>

<p>Restart the Java application to apply the changes, then you are good to go.</p>

<p>If it doesn’t work, you may have a look at the content of the cacert file. Again, you can just use the <code class="language-plaintext highlighter-rouge">keytool</code> command as follows:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>keytool <span class="nt">-list</span> <span class="nt">-v</span> <span class="nt">-keystore</span> <span class="nv">$JAVA_HOME</span>/jre/lib/security/cacerts <span class="nt">-storepass</span> changeit | less
</code></pre></div></div>

<p>Have a look at the total number of entries to check if the certificates are indeeded imported. You can also check the expiry time and make sure the certificates are still valid (e.g., <code class="language-plaintext highlighter-rouge">valid from *** until ***</code>).</p>]]></content><author><name>Yongjie Zhuang</name></author><category term="Learning" /><summary type="html"><![CDATA[Java internally maintain a list of CA certificates. These CA certificates are shipped with the JDK installed.]]></summary></entry><entry><title type="html">A Python Beginner Guide for My Friend</title><link href="https://curtisnewbie.github.io/tutorial/2024/12/29/python-beginner-guide.html" rel="alternate" type="text/html" title="A Python Beginner Guide for My Friend" /><published>2024-12-29T23:00:00+08:00</published><updated>2024-12-29T23:00:00+08:00</updated><id>https://curtisnewbie.github.io/tutorial/2024/12/29/python-beginner-guide</id><content type="html" xml:base="https://curtisnewbie.github.io/tutorial/2024/12/29/python-beginner-guide.html"><![CDATA[<!-- https://curtisnewbie.github.io/tutorial/2024/12/29/python-beginner-guide.html -->

<h2 id="1-基础知识">1. 基础知识</h2>

<h3 id="11-编程语言">1.1 编程语言</h3>

<p>编程语言是你编写程序的方式, 编程语言本身没有什么特别的魔法, 只是一种媒介, 让你可以描述你希望程序如何进行工作. 编程语言有一套固定的编写规则,
在我们写完我们的代码 (Python) 以后, 我们用对应的工具执行我们的代码, 我们的电脑会明白我们需要他做些什么, 执行我们的编写的逻辑, 输出我们要的结果.
你可以理解编程语言是专门设计来和机器/系统沟通的语言.</p>

<p>你可以想象成下面图片中的样子, 我们要写 Python, 我们就需要将 Python 安装到我们的电脑中.</p>

<p><img src="/assets/images/python-beginner-guide/1.png" style="height: 400px" /></p>

<p>至于在你编写 Python 的时候, 为什么要这样写, 为什么要写这些符号, 你不用太在意这样的疑问. 因为 Python 要求你这样写, 我们就按它要求的方式编写,
Python 程序也就能理解我们在写什么, 理解了我们写什么它就能按我们要求的运行. 这背后更深的设计原因暂时先忘记, 先动手再深入.</p>

<h3 id="12-操作系统">1.2 操作系统</h3>

<p>操作系统本质上就是个软件, 操作系统负责和硬件交互, 我们的电脑可以选择安装不同的操作系统, 但是本质上都是软件. 我们的 Python 代码在编写完后可以在不同的系统上运行,
这是因为不同的系统上安装的 Python 是不一样的, Python 官方自己会适配不同的操作系统. mac 上安装的是 Python mac 版, windows 上安装的是 Python windows 版,
所以绝大部分场景我们不在乎我们的脚本在什么系统上执行.</p>

<p>当我们希望写 Python 代码让我们的操作系统做些什么, 我们只需要按照 Python 要求我们的方式写对应的代码, 我们电脑上安装的 Python 会跟我们电脑的操作系统交互,
操作系统就会去做对应的事情. 例如, 我们希望读硬盘上的一份文件, 操作系统就会去操作硬盘, 加载这份文件的内容.</p>

<h3 id="13-命令行">1.3 命令行</h3>

<p>命令行 (windows 上叫做 Command Prompt / 命令提示符) 本质上也就是个软件而已, 只是命令行是一种相对更专业的工具, 专门用于执行命令. 技术人员使用命令行很多时候只是因为以下几个原因：</p>

<ol>
  <li>命令行更适合自动化, 例如, 写个脚本跑一大串命令 (页面不好自动点一堆按钮)</li>
  <li>缺少页面给技术人员点, 没得选, 只能跑命令</li>
  <li>喜欢命令行 (个人偏好)</li>
</ol>

<h2 id="2-准备环境">2. 准备环境</h2>

<h3 id="21-安装-python">2.1 安装 Python</h3>

<p>一般来说我们不讲究 Python 的版本, 只要不是太旧就可以, 我们挑个新的版本玩也可以, 例如, 目前最新的稳定版本是 3.12.8.</p>

<p>如下图, 点开官方网站: <a href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/</a>, 找到 <code class="language-plaintext highlighter-rouge">Python 3.12.8</code>, 点击下载 <code class="language-plaintext highlighter-rouge">Download Windows installer (64-bit)</code>。</p>

<p><img src="/assets/images/python-beginner-guide/2.png" style="height: 400px" /></p>

<p>下载后, 打开安装包, 进行安装. 安装的过程中如果有显示 <code class="language-plaintext highlighter-rouge">Add python.exe to PATH</code> 这样的内容, 记得将勾选框钩上 (看图片最下方).</p>

<p><img src="/assets/images/python-beginner-guide/6.png" style="height: 300px" /></p>

<p>安装完成后, 我们可以打开命令行, 验证我们的安装是否有效: 点击 Windows 的图标, 搜索并且打开 Command Prompt (命令行):</p>

<p>输入 <code class="language-plaintext highlighter-rouge">Python</code>, 如果你看到显示关于 Python 版本等信息的英文, 你可以看下版本是不是我们现在装的版本 (3.12.8), 如果是, 那么恭喜你, 你成功了.
如果不是, 那么代表安装过程有点问题, 你可以重新安装, 并且确保把 <code class="language-plaintext highlighter-rouge">Add python.exe to PATH</code> 勾选框选上.</p>

<p>如果你成功了, 要退出这个 Python 控制台, 输入 <code class="language-plaintext highlighter-rouge">exit()</code> 就可以退出, 效果大致如下:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span>python
Python 3.12.8 <span class="o">(</span>tags/v3.12.8:2dc476b, Dec  3 2024, 19:30:04<span class="o">)</span> <span class="o">[</span>MSC v.1942 64 bit <span class="o">(</span>AMD64<span class="o">)]</span> on win32
Type <span class="s2">"help"</span>, <span class="s2">"copyright"</span>, <span class="s2">"credits"</span> or <span class="s2">"license"</span> <span class="k">for </span>more information.
<span class="o">&gt;&gt;&gt;</span> <span class="nb">exit</span><span class="o">()</span>
</code></pre></div></div>

<h3 id="22-安装编辑器">2.2 安装编辑器</h3>

<p>对于较复杂的编程语言来说, 技术人员通常会选择较多功能的编辑器, 这类统称为 IDE (Integrated Development Environment), 可以理解成这种编辑器软件把大部分功能都塞进去了.
对于 Python 来说, 一般不太需要太 <em>“高级”</em> 的编辑器, 推荐使用 vscode 即可. Python 本身语言较轻, 写起来比较直观, 不需要一大堆工具辅助 (不代表 Python 本身不高级, 只是不会过于不必要的复杂).</p>

<p>编辑器简单的来说就是个文本编辑的软件, 然后我们配套安装些插件, 插件会集成我们上面安装的 Python 从而让编辑器识别我们的代码, 我们就能有一些代码高亮, 代码文档展示, 代码编写错误提醒等基础功能.</p>

<p>打开 vscode 官网: <a href="https://code.visualstudio.com/download">https://code.visualstudio.com/download</a>, 找到 windows 版本, 下载 <code class="language-plaintext highlighter-rouge">x64 User Installer</code> 版本:</p>

<p><img src="/assets/images/python-beginner-guide/3.png" style="height: 400px" /></p>

<p>下载后正常安装安装包, 安装后我们打开这个软件, 在左边导航栏, 选择插件页面 (如下图):</p>

<p><img src="/assets/images/python-beginner-guide/4.png" style="height: 300px" /></p>

<p>在搜索框中搜索并且安装下图中三个插件, 这三个插件都由微软提供 (我们可以看到 Microsoft 在插件描述的下面):</p>

<p><img src="/assets/images/python-beginner-guide/5.png" style="height: 200px" /></p>

<p>安装后, 如果 vscode 提醒的话, 重启 vscode, 至此你已经可以开始写 Python 了.</p>

<h2 id="3-编写-python">3. 编写 Python</h2>

<h3 id="31-第一个-python-脚本">3.1 第一个 Python 脚本</h3>

<p>打开 vscode, 选择新建一个文本文件, 按下 <code class="language-plaintext highlighter-rouge">ctrl+s</code> 保存到你喜欢的地方, 确保命名带 <code class="language-plaintext highlighter-rouge">.py</code> 后缀, 例如: <code class="language-plaintext highlighter-rouge">myscript.py</code>. 一般来说一个工程的文件都是放在同一个文件夹层级下.</p>

<p>输入以下内容, 然后 <code class="language-plaintext highlighter-rouge">ctrl+s</code> 保存:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">msg</span> <span class="o">=</span> <span class="s">"Hello world"</span>
<span class="k">print</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</code></pre></div></div>

<p>保持在 vscode 页面中, 按下键盘中的 <code class="language-plaintext highlighter-rouge">Ctrl+`</code> 键, 这个时候 vscode 会在底部展示出一个控制台.</p>

<p>一般来说你在 vscode 打开一个文件夹，这个控制台所处位置与你的文件夹所在位置是一致的:</p>

<p>例如, 大概长下面这个样子:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PS C:\Users\.....&gt;
</code></pre></div></div>

<p>如果不在同一个位置, 你可以点击页面最上方 <code class="language-plaintext highlighter-rouge">File</code> 下拉框, 选择 <code class="language-plaintext highlighter-rouge">Open Folder...</code>, 然后再打开你的文件夹 (你的脚本的位置).
这个时候你可以输入以下命令来运行我们的第一个脚本:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python myscript.py
</code></pre></div></div>

<p>这个时候控制台应该会运行我们的代码, 同时打印出 <code class="language-plaintext highlighter-rouge">"Hello world"</code>, 这就算运行成功了.</p>

<p>现在我们来理解第一个 Python 脚本, 脚本本身很简单, 但是大部分复杂的脚本本身也是基于这些基础的东西写出来的, 所以不用觉得没有意义:</p>

<p>脚本的第一行:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">msg</span> <span class="o">=</span> <span class="s">"Hello world"</span>
</code></pre></div></div>

<p>我们可以看出这是个等式, 在大部分编程语言中, 等号就是赋值的意思, 也就是说 = 的左侧被赋予了右边的值 “Hello world”.</p>

<p>在等号的左侧是一个变量, <code class="language-plaintext highlighter-rouge">msg</code> 是这个变量的名称, 我们在编写代码的时候会使用多个变量, 给变量赋值, 用来存储我们计算的结果. 这里, 我们就创建了一个变量 <code class="language-plaintext highlighter-rouge">msg</code>,
同时让它的值为 “Hello world”.</p>

<p>然后在脚本的第二行中:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</code></pre></div></div>

<p>我们使用了函数 <code class="language-plaintext highlighter-rouge">print()</code>, 我们将我们上面创建的变量 <code class="language-plaintext highlighter-rouge">msg</code> 传入到这个函数中, 而这个函数 <code class="language-plaintext highlighter-rouge">print()</code> 正如它的英文名称 print 一样, 它负责将我们提供的内容打印出来,
也就是输出到我们的控制台中.</p>

<p>如果你不理解什么是变量, 什么是函数, 不用担心, 下面会尽可能描述清楚. 代码本身不是难点, 而代码要实现的事情才是难点.</p>

<h3 id="32-代码注释">3.2 代码注释</h3>

<p>代码注释的意思就是, 给代码写说明. 注释是有固定格式的, 也就是以 <code class="language-plaintext highlighter-rouge">#</code> 开头后面的内容都是注释的内容.</p>

<p>代码注释是不会被运行的, 也就是说不管你注释内容里写什么, 都不影响程序本身, 只是程序员写给自己看或给别人看的说明.</p>

<p>例如:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1"># a 是 1, 这段灰色的字是解释, 没有实际意义
</span></code></pre></div></div>

<p>你会在后续的例子中看到不少注释的使用.</p>

<h3 id="32-变量">3.2 变量</h3>

<p>变量 (Variable) 这个概念源于数学, 在编程中, 变量就是一个有名称的, 可以存储值的抽象概念. 例如,</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">b</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</code></pre></div></div>

<p>上面有三个变量, 分别命名为 <code class="language-plaintext highlighter-rouge">a</code>, <code class="language-plaintext highlighter-rouge">b</code>, <code class="language-plaintext highlighter-rouge">c</code>. 代码执行的时候一般是从上往下, 从右往左执行的, 也就是说, 这个脚本运行的过程如下:</p>

<ol>
  <li>创建变量 a, 给 a 赋值 1</li>
  <li>创建变量 b, 给 b 赋值 2</li>
  <li>创建变量 c, 给 c 赋值 a + b 也就是 3</li>
</ol>

<p>基于变量的概念, 我们可以往变量里存数据, 也可以从变量取数据. 你可以理解成, 等号左边的是存数据, 是赋值, 其他情况是从变量读数据.</p>

<p>Python 的变量名一般是: 单词 + 下划线</p>

<p>例如: <code class="language-plaintext highlighter-rouge">user_info</code></p>

<p>核心就是用下划线分隔开单词的缩写, 读起来更清晰, 像 user_info 基本不用想就是个装了各种用户信息的变量.</p>

<h3 id="33-数据类型">3.3 数据类型</h3>

<p>不同的数据会有不同的数据类型, Python 本身支持的有:</p>

<ol>
  <li>整数</li>
  <li>浮点数 (就是带小数点的)</li>
  <li>字符串 (一串字符, 所以称为字符串, 例如: “HELLO” 本质上是 “H”, “E”, “L”, “L”, “O”, 5 个字符的集合表达形式), 一般用双引号来表示</li>
  <li>布尔值, 也就是 <code class="language-plaintext highlighter-rouge">True</code> 和 <code class="language-plaintext highlighter-rouge">False</code></li>
  <li>空值, 代表没有值, 代码中以 <code class="language-plaintext highlighter-rouge">None</code> 表示</li>
</ol>

<p>我们编写 Python 代码给变量赋值的时候, Python 会推断变量的数据类型.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">msg</span> <span class="o">=</span> <span class="s">"Hello world"</span> <span class="c1"># 这是字符串
</span><span class="k">print</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>

<span class="n">msg</span> <span class="o">=</span> <span class="mi">1</span>             <span class="c1"># 这是整数
</span><span class="k">print</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>

<span class="n">msg</span> <span class="o">=</span> <span class="mf">1.1</span>           <span class="c1"># 这是浮点数
</span><span class="k">print</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</code></pre></div></div>

<p>Python 不要求变量总是只使用一种数据类型, 也就是说你赋值啥, 变量就是啥. 当然, 一般来说不推荐, 因为你会把自己弄懵.</p>

<h3 id="34-运算符">3.4 运算符</h3>

<p>我们可以对代码写的值进行运算, 也可以基于变量进行运算, 这些我们统称为运算符. 常见的运算符有 (实际有更多, 但我们先不陷进去):</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">+</code> : 加法, 或者拼接字符串</li>
  <li><code class="language-plaintext highlighter-rouge">-</code> : 减法</li>
  <li><code class="language-plaintext highlighter-rouge">*</code> : 乘法</li>
  <li><code class="language-plaintext highlighter-rouge">/</code> : 除法</li>
  <li><code class="language-plaintext highlighter-rouge">%</code> : 求余</li>
  <li><code class="language-plaintext highlighter-rouge">&gt;</code> : 比较数值, 或者字符串排序, 大于</li>
  <li><code class="language-plaintext highlighter-rouge">&gt;=</code> : 比较数值, 或者字符串排序, 大于等于</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;</code> : 比较数值, 或者字符串排序, 小于</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;=</code> : 比较数值, 或者字符串排序, 小于等于</li>
  <li><code class="language-plaintext highlighter-rouge">==</code> : 比较值是否相等, 例如, 比较整数, 字符串, 布尔值</li>
  <li><code class="language-plaintext highlighter-rouge">!=</code> : 比较值是否不相等, 例如, 比较整数, 字符串, 布尔值</li>
  <li><code class="language-plaintext highlighter-rouge">is</code> : 比较两个变量是否为同一个, 例如, 检查 msg 是否为空: <code class="language-plaintext highlighter-rouge">msg is None</code></li>
  <li><code class="language-plaintext highlighter-rouge">is not</code> : 比较两个变量是否为同一个, 例如, 检查 msg 是否不为空: <code class="language-plaintext highlighter-rouge">msg is not None</code></li>
  <li><code class="language-plaintext highlighter-rouge">in</code> : 检查值是否在数据结构中 (看不懂没关系, 知道是个检查就可以了)</li>
  <li><code class="language-plaintext highlighter-rouge">not in</code> : 检查值是否不在数据结构中 (看不懂没关系, 知道是个检查就可以了)</li>
</ol>

<p>基本上也就上面这些运算符, 除去数学的, 基本也没剩几个了. 下面是个对这些运算符使用的例子:</p>

<p>例如, 加减乘除:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span>  <span class="c1"># a 是 3
</span><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="mi">2</span>  <span class="c1"># a 是 -1
</span><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">*</span> <span class="mi">2</span>  <span class="c1"># a 是 2
</span><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="mi">2</span>  <span class="c1"># a 是 0.5
</span><span class="n">a</span> <span class="o">=</span> <span class="mi">3</span> <span class="o">%</span> <span class="mi">2</span>  <span class="c1"># a 是 1
</span></code></pre></div></div>

<p>例如, 比较, 比较的结果实际上是布尔值 (True / False):</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&gt;</span> <span class="mi">2</span>   <span class="c1"># a 是 False (1 是否大于 2)
</span><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">2</span>   <span class="c1"># a 是 True  (1 是否小于 2)
</span><span class="n">a</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">&gt;=</span> <span class="mi">1</span>  <span class="c1"># a 是 True  (2 是否大于等于 1)
</span><span class="n">a</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">&lt;=</span> <span class="mi">1</span>  <span class="c1"># a 是 False (2 是否小于等于 1)
</span><span class="n">a</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span>  <span class="c1"># a 是 False (2 是否等于 1)
</span><span class="n">a</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mi">1</span>  <span class="c1"># a 是 True  (2 是否不等于 1)
</span></code></pre></div></div>

<p>例如, 检查两个变量是否为同一个, 使用 <code class="language-plaintext highlighter-rouge">is</code> 和 <code class="language-plaintext highlighter-rouge">is not</code> (注意, 同一个不是代表值相等), 一般我们只用 <code class="language-plaintext highlighter-rouge">is</code>/ <code class="language-plaintext highlighter-rouge">is not</code> 判断变量是否为空:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="ow">is</span> <span class="bp">None</span>     <span class="c1"># b 是 False, 因为 a 有值, a 不是 none, 值为 1
</span><span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="c1"># b 是 True, 因为 a 有值, a 不是 none, 值为 1
</span></code></pre></div></div>

<p>例如, 检查值是否在数据结构中, 使用 <code class="language-plaintext highlighter-rouge">in</code> 和 <code class="language-plaintext highlighter-rouge">not in</code> (不懂什么是数据结构没关系, 就是拿来装数据的):</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>   <span class="c1"># 我们有个列表, 里面有 1, 2, 3
</span><span class="k">if</span> <span class="mi">1</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">:</span>      <span class="c1"># 检查数字 1 在不在 my_list 里面
</span>    <span class="k">print</span><span class="p">(</span><span class="s">"my_list 里面有 1"</span><span class="p">)</span>

<span class="k">if</span> <span class="mi">4</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">:</span>  <span class="c1"># 检查数字 4 在不在 my_list 里面
</span>    <span class="k">print</span><span class="p">(</span><span class="s">"my_list 里面没有 4"</span><span class="p">)</span>
</code></pre></div></div>

<p>后续你会基于这些判断写条件:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a 居然大于 0"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">a</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a 不是 None"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="35-条件判断--逻辑分支">3.5 条件判断 / 逻辑分支</h3>

<p>当我们开始准备学条件判断, 开始写函数的时候, 我们要开始学习下 Python 的代码格式. Python 代码是以 Tab 来进行行缩进, 用于区分当前代码的位置 (归属于哪个逻辑分支).</p>

<p>我们先简单介绍 <code class="language-plaintext highlighter-rouge">if ... else ...</code> 来方便你理解什么时候要加 Tab, (<code class="language-plaintext highlighter-rouge">if ... else ...</code> 中文来说就是 <code class="language-plaintext highlighter-rouge">如果满足 a 做 b 否则做 c</code>)</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1</span><span class="o">|</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="mi">2</span><span class="o">|</span> <span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
<span class="mi">3</span><span class="o">|</span>    <span class="k">print</span><span class="p">(</span><span class="s">"a 是 1"</span><span class="p">)</span>
<span class="mi">4</span><span class="o">|</span> <span class="k">else</span><span class="p">:</span>
<span class="mi">5</span><span class="o">|</span>    <span class="k">print</span><span class="p">(</span><span class="s">"a 不是 1"</span><span class="p">)</span>
</code></pre></div></div>

<p>在上面例子中:</p>

<ol>
  <li>第一行我们创建了变量 a</li>
  <li>第二行我们比较 a 是不是等于 1</li>
  <li>第三行我们增加了 Tab 缩进, 也就是说 <code class="language-plaintext highlighter-rouge">print("a 是 1")</code> 是在 <code class="language-plaintext highlighter-rouge">if a == 1:</code> 层级下, 只有当 a 等于 1 时才会执行</li>
  <li>第四行是 <code class="language-plaintext highlighter-rouge">else:</code> 说明, <code class="language-plaintext highlighter-rouge">else:</code> 层级下的代码, 只有当 a 不等于 1 时才会执行</li>
  <li>第五行我们增加了 Tab 缩进, 说明第五行只有在第四行满足的时候才会执行</li>
</ol>

<p>如果我们想, 我们可以在通过 Tab 缩进, 在一个逻辑分支下写很多行代码, 例如:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a 是 1"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a 真的是 1"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a 真的真的是 1"</span><span class="p">)</span>
</code></pre></div></div>

<p>条件判断 / 逻辑分支主要有以下几种:</p>

<ol>
  <li>
    <p>如果 a 做 b (if …)</p>

    <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">if</span> <span class="n">a</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a 大于等于 1"</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>如果 a 做 b 否则做 c (if … else …)</p>

    <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">if</span> <span class="n">a</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a 大于等于 1"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a 小于 1"</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>如果 a 做 b 但如果 c 做 d 否则做 e (if … elif … else …)</p>

    <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">2</span>
<span class="k">if</span> <span class="n">a</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a 大于等于 3"</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">a</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a 大于等于 2"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a 是其他"</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>只要 a 一直重复做 b (while …)</p>

    <p>例如, 只要 a 小于 4, 下面代码就会打印一次 a 的内容, 同时给 a 加 1, 直到 a 小于 4.</p>

    <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">while</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a 现在是"</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">1</span>
</code></pre></div>    </div>
  </li>
</ol>

<p>条件判断还可以嵌套, 只要你需要, 不要太考虑美观问题, 只要合理就可以:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a 大于 0"</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"a 还等于 1 呢"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"a 小于等于 0"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="36-函数">3.6 函数</h3>

<p>函数 (Function) 同样是源于数学的概念。函数由以下几个部分组成:</p>

<ol>
  <li>函数的输入 (外部提供给函数的内容), 也常叫入参 (输入参数)</li>
  <li>函数的名称</li>
  <li>函数内部的逻辑, 我们通常会写函数, 基于入参做一些运算</li>
  <li>函数的输出, 函数进行运算完以后, 返回给外部的内容</li>
</ol>

<p>Python 有大量的内置函数, 也就是 Python 这门语言写好的功能, 如果我们想要使用, 我们直接基于这些函数的名称, 将函数定义的入参传给它们即可.</p>

<p>回顾下上面我们第一个脚本:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">msg</span> <span class="o">=</span> <span class="s">"Hello world"</span>
<span class="k">print</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">print(..)</code> 就是我们见到的第一个内置函数, 这个函数负责将入参输出到控制台中, 而我们提供的入参正是定义好的变量 <code class="language-plaintext highlighter-rouge">msg</code>, 所以函数最终的行为是打印 “Hello world”.</p>

<p>除了内置函数, 我们还可以引入别人写的代码 (的函数), 也可以自己写函数自己用.</p>

<p>函数的写法是: <code class="language-plaintext highlighter-rouge">def 函数名(参数名)</code>, 例如, 我们写了个函数, 将函数中的第一个参数和第二个参数相加:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">add_num</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</code></pre></div></div>

<p>我们使用函数是为了做些什么事, 执行一段的代码, 有的时候我们需要拿到函数返回的内容, 我们会使用 <code class="language-plaintext highlighter-rouge">return</code> 关键词, <code class="language-plaintext highlighter-rouge">return</code> 会将结果返回出去.</p>

<p>写好该函数后, 我们可以用这个函数的名称进行使用, 这里 c 被赋值, 而 c 的值正是来源于 add_num 函数中的 return 值.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">b</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">add_num</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="c1"># c 是 3
</span></code></pre></div></div>

<p>但是 <code class="language-plaintext highlighter-rouge">return</code> 并不是必要的, 如果你不需要函数返回值, 你不需要在函数里写 <code class="language-plaintext highlighter-rouge">return</code>.</p>

<h3 id="37-数据结构">3.7 数据结构</h3>

<p>数据结构是个专业名词, 英文是 Data Structure, 也就是设计用来装数据的结构, 因为你不是专业程序员, 不用特别专研有哪些数据结构. 不同类型的数据在取/存的时候, 使用不同的数据结构会有不同的效率, 熟练的程序员选择合适的那个数据结构最大化程序的效率.
但是就算效率低有的时候也能完成工作, 不用太在意.</p>

<p>数据结构本身有很多种, 有的设计特别复杂, 但基本上我们平时用得多的也就两种:</p>

<ol>
  <li>数组 (本质就是一个紧凑的列表)</li>
  <li>字典 (一个 key 对应一个 value)</li>
</ol>

<p>数组就类似于, 你把一个个空的桶放成了一排, 每个桶可以装一个东西, 数组就是这一整排的桶. 当你要往数组放东西的时候, 你可以从头开始或者从尾开始, 一个个检查看桶是不是空的, 如果不是空的就看下一个, 如果是空的, 你就可以把东西放进去.
这种一个个桶看的动作, 编程里叫做 <em>“遍历”</em>, 英文叫做 <em>“iterate”</em>. 如果这一排的桶都满了, 那么你会在这排最后一个桶后面放更多的空桶, 让这个数组变得更长, 这种操作一般称为 <em>“扩容“</em>, 因为数组的容量变大了.</p>

<p>字典就类似于, 在数组的基础上额外增加了份目录. 这份目录中我们给桶标了记号, 例如, 桶-A, 桶-B, 桶-C 等等等等. 通过编号你可以一下子找到桶是哪个, 你不需要一个个看. 在我们要放东西到字典前, 我们先通过固定的规则, 算出这个东西应该放哪个桶, 我们记录下来,
然后我们把这个东西放到对应的桶里. 而这个计算放在哪里的值, 我们统称为 key, 一个 key 会有对应的一个桶, 如果我们下次要找这个 key 的内容是什么, 我们可以快速基于字典的目录定位到桶, 直接拿出来.</p>

<p>基于这样的特征, 你也能尝试理解为什么这个数据结构被叫为字典, 因为字典就只是这样工作的: 单词有排序规则, 目录页记录单词在字典里的页码.</p>

<h2 id="38-数组">3.8 数组</h2>

<p>数组很简单, 本质就是紧凑的一排桶, 这一排桶是有顺序的. 我们使用 <code class="language-plaintext highlighter-rouge">[]</code> 创建空数组, 我们也可以像 <code class="language-plaintext highlighter-rouge">[ 1, 2, 3, 4 ]</code> 这样创建带有值的数组.</p>

<p>因为数组中这一排桶是有顺序的, 我们可以基于桶的位置进行读取. 数组中的第一个桶的位置是 0 (所有语言都是这样设计的, 不纠结).</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">buckets</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">buckets</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c1"># 读第一个桶, a 现在等于 1
</span><span class="n">a</span> <span class="o">=</span> <span class="n">buckets</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># 读第二个桶, a 现在等于 2
</span><span class="n">a</span> <span class="o">=</span> <span class="n">buckets</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="c1"># 读第三个桶, a 现在等于 3
</span><span class="n">a</span> <span class="o">=</span> <span class="n">buckets</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="c1"># 读第四个桶, a 现在等于 3
</span></code></pre></div></div>

<p>如果我要遍历数组的所有内容怎么办, 有三种方法, 第一种是从 0 数到最后一个桶:</p>

<p>要知道最后一个桶的位置, 首先要知道数组的大小, 我们使用 Python 内置的函数: <code class="language-plaintext highlighter-rouge">len()</code>:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">buckets</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
<span class="n">a</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">buckets</span><span class="p">)</span> <span class="c1"># a = 4
</span></code></pre></div></div>

<p>因为第一个桶的位置是 0, 最后一个桶就一定是数组的大小 - 1, 所以我们知道最后一个桶就是: <code class="language-plaintext highlighter-rouge">len(buckets) - 1</code>.
所以我们可以写以下代码遍历所有的桶:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">buckets</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
<span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">buckets</span><span class="p">):</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">buckets</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</code></pre></div></div>

<p>第二种方法是 <code class="language-plaintext highlighter-rouge">for ... in</code>, 也就是让 Python 自己帮你遍历数组, 这种是最简单的, 就像写英语一样, 不用在意桶的位置:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">buckets</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
<span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">buckets</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="39-字典">3.9 字典</h3>

<p>我们基本上绝大部分情况使用字典, 字典的 key 都是字符串或者数字, value 则是随便我们觉得顺手的值:</p>

<p>要创建一个字典, 我们使用 <code class="language-plaintext highlighter-rouge">{}</code>:</p>

<p>例如:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">names</span> <span class="o">=</span> <span class="p">{}</span>
</code></pre></div></div>

<p>我们也可以创建一个带有 key-value 的字典, 例如:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">goods_count</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"apple"</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
    <span class="s">"orange"</span><span class="p">:</span> <span class="mi">30</span>
<span class="p">}</span>
</code></pre></div></div>

<p>我们用 <code class="language-plaintext highlighter-rouge">in</code> / <code class="language-plaintext highlighter-rouge">not in</code> 检查一个 key 是否在字典里. 同时我们使用 <code class="language-plaintext highlighter-rouge">字典名[KEY名称]</code> 来读写字典的值.</p>

<p>例如:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">names</span> <span class="o">=</span> <span class="p">{}</span>

<span class="c1"># 检查 yongjie 是否在 names 里
</span><span class="k">if</span> <span class="s">"yongjie"</span> <span class="ow">in</span> <span class="n">names</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"在"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"不在"</span><span class="p">)</span>

<span class="c1"># 把 yongjie 作为 key 放进 names 里, value 随便写点什么, 这里就写 1
</span><span class="n">names</span><span class="p">[</span><span class="s">"yongjie"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>

<span class="k">if</span> <span class="s">"yongjie"</span> <span class="ow">in</span> <span class="n">names</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"现在在了"</span><span class="p">)</span>

    <span class="c1"># 读这个 "yongjie" 对应的值是什么
</span>    <span class="n">a</span> <span class="o">=</span> <span class="n">names</span><span class="p">[</span><span class="s">"yongjie"</span><span class="p">]</span>   <span class="c1"># a 是 1
</span>    <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</code></pre></div></div>

<p>那字典有什么实际的用途呢? 想象你有一份商品列表, 商品有名称, 种类, 有数量, 我们可以用字典做统计.</p>

<p>假设这个列表长下面这样, 一个表格, 本质上就是一个数组里面装了更多的数组:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span>
    <span class="p">[</span><span class="s">"红苹果"</span><span class="p">,</span> <span class="s">"苹果"</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"青苹果"</span><span class="p">,</span> <span class="s">"苹果"</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"黄香蕉"</span><span class="p">,</span> <span class="s">"香蕉"</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"水梨子"</span><span class="p">,</span> <span class="s">"梨子"</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
<span class="p">]</span>
</code></pre></div></div>

<p>你可以想像成以下这个样子:</p>

<table>
  <thead>
    <tr>
      <th>名称</th>
      <th>种类</th>
      <th>个数</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>红苹果</td>
      <td>苹果</td>
      <td>1</td>
    </tr>
    <tr>
      <td>青苹果</td>
      <td>苹果</td>
      <td>2</td>
    </tr>
    <tr>
      <td>黄香蕉</td>
      <td>香蕉</td>
      <td>2</td>
    </tr>
    <tr>
      <td>水梨子</td>
      <td>梨子</td>
      <td>2</td>
    </tr>
  </tbody>
</table>

<p>那么我想计算, 各种类一共卖了多少, 我可以用字典进行分类汇总:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 假设表格长这样
</span><span class="n">table</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[</span><span class="s">"红苹果"</span><span class="p">,</span> <span class="s">"苹果"</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"青苹果"</span><span class="p">,</span> <span class="s">"苹果"</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"黄香蕉"</span><span class="p">,</span> <span class="s">"香蕉"</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
    <span class="p">[</span><span class="s">"水梨子"</span><span class="p">,</span> <span class="s">"梨子"</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
<span class="p">]</span>

<span class="c1"># 汇总字典
</span><span class="n">summary</span> <span class="o">=</span> <span class="p">{}</span>

<span class="c1"># 遍历数组
</span><span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">table</span><span class="p">:</span>      <span class="c1"># 每一行同时也是个数组
</span>    <span class="n">name</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>      <span class="c1"># 每一行的第一个, 名称
</span>    <span class="n">category</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>  <span class="c1"># 每一行的第二个, 种类
</span>    <span class="n">count</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>     <span class="c1"># 每一行的第三个, 个数
</span>
    <span class="c1"># 开始汇总
</span>
    <span class="k">if</span> <span class="n">category</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">summary</span><span class="p">:</span>     <span class="c1"># 如果之前没有这个种类, 字典的这个种类的值就是 count
</span>        <span class="n">summary</span><span class="p">[</span><span class="n">category</span><span class="p">]</span> <span class="o">=</span> <span class="n">count</span>
    <span class="k">else</span><span class="p">:</span>                           <span class="c1"># 如果之前有这个种类, 字典的这个种类的值就是: 之前的数量加上现在的种类的 count
</span>        <span class="n">summary</span><span class="p">[</span><span class="n">category</span><span class="p">]</span> <span class="o">=</span> <span class="n">summary</span><span class="p">[</span><span class="n">category</span><span class="p">]</span> <span class="o">+</span> <span class="n">count</span>


<span class="c1"># 你可以把字典打印出来看长什么样
</span><span class="k">print</span><span class="p">(</span><span class="n">summary</span><span class="p">)</span>

<span class="c1"># 长这样
#
# {'苹果': 3, '香蕉': 2, '梨子': 2}
</span></code></pre></div></div>

<p>既然数组可以遍历, 字典肯定也是可以遍历的, 但是字典中的桶没有顺序, 所以我们不能直接用数字去指定读哪个桶.
不过我们同样可以用 <code class="language-plaintext highlighter-rouge">for ... in </code> 来遍历, 只不过我们遍历的是字典的 key, 然后我们那 key 去读字典的值.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary</span> <span class="o">=</span> <span class="p">{</span><span class="s">"苹果"</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s">"香蕉"</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">"梨子"</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
<span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">summary</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"key:"</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="s">"value:"</span><span class="p">,</span> <span class="n">summary</span><span class="p">[</span><span class="n">key</span><span class="p">])</span>

<span class="c1"># 输出的结果如下:
# key: 苹果 value: 3
# key: 香蕉 value: 2
# key: 梨子 value: 2
</span></code></pre></div></div>]]></content><author><name>Yongjie Zhuang</name></author><category term="Tutorial" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">How to patch node_module source code</title><link href="https://curtisnewbie.github.io/learning/2024/09/10/how-to-patch-node-module.html" rel="alternate" type="text/html" title="How to patch node_module source code" /><published>2024-09-10T15:39:00+08:00</published><updated>2024-09-10T15:39:00+08:00</updated><id>https://curtisnewbie.github.io/learning/2024/09/10/how-to-patch-node-module</id><content type="html" xml:base="https://curtisnewbie.github.io/learning/2024/09/10/how-to-patch-node-module.html"><![CDATA[<p><strong>Credits:</strong></p>

<ul>
  <li>https://stackoverflow.com/questions/72820625/what-is-the-proper-way-to-patch-a-node-modules-module</li>
</ul>

<p>Install all your dependencies, make sure <code class="language-plaintext highlighter-rouge">/node_modules</code> is properly installed:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm ci
</code></pre></div></div>

<p>Install patche-packages and postinstall dependencies:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install </span>patch-package postinstall-postinstall
</code></pre></div></div>

<p>Modify <code class="language-plaintext highlighter-rouge">package.json</code> to automatically apply patches after install:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="err">//</span><span class="w"> </span><span class="err">...</span><span class="w">
  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">//</span><span class="w"> </span><span class="err">...</span><span class="w">
    </span><span class="nl">"postinstall"</span><span class="p">:</span><span class="w"> </span><span class="s2">"patch-package"</span><span class="w">
  </span><span class="p">}</span><span class="w">

  </span><span class="err">//</span><span class="w"> </span><span class="err">...</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Modify code in <code class="language-plaintext highlighter-rouge">/node_modules</code>, e.g., Changing <code class="language-plaintext highlighter-rouge">highlight.js</code> source code as below:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// before the change</span>
<span class="nx">regex</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">concat</span><span class="p">:</span> <span class="p">(...</span><span class="nx">args</span><span class="p">:</span> <span class="p">(</span><span class="nb">RegExp</span> <span class="o">|</span> <span class="kr">string</span><span class="p">)[])</span> <span class="o">=&gt;</span> <span class="kr">string</span><span class="p">,</span>
    <span class="nx">lookahead</span><span class="p">:</span> <span class="p">(</span><span class="nx">re</span><span class="p">:</span> <span class="nb">RegExp</span> <span class="o">|</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="kr">string</span><span class="p">,</span>
    <span class="nx">either</span><span class="p">:</span> <span class="p">(...</span><span class="nx">args</span><span class="p">:</span> <span class="p">(</span><span class="nb">RegExp</span> <span class="o">|</span> <span class="kr">string</span><span class="p">)[]</span> <span class="o">|</span> <span class="kr">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="kr">string</span><span class="p">,</span>
    <span class="nx">optional</span><span class="p">:</span> <span class="p">(</span><span class="nx">re</span><span class="p">:</span> <span class="nb">RegExp</span> <span class="o">|</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="kr">string</span><span class="p">,</span>
    <span class="nx">anyNumberOfTimes</span><span class="p">:</span> <span class="p">(</span><span class="nx">re</span><span class="p">:</span> <span class="nb">RegExp</span> <span class="o">|</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="kr">string</span>
<span class="p">}</span>
<span class="nl">newInstance</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">HLJSApi</span>

<span class="c1">// after the change</span>
<span class="nx">regex</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">concat</span><span class="p">:</span> <span class="p">(...</span><span class="nx">args</span><span class="p">:</span> <span class="p">(</span><span class="nb">RegExp</span> <span class="o">|</span> <span class="kr">string</span><span class="p">)[])</span> <span class="o">=&gt;</span> <span class="kr">string</span><span class="p">,</span>
    <span class="nx">lookahead</span><span class="p">:</span> <span class="p">(</span><span class="nx">re</span><span class="p">:</span> <span class="nb">RegExp</span> <span class="o">|</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="kr">string</span><span class="p">,</span>
    <span class="nx">either</span><span class="p">:</span> <span class="p">(...</span><span class="nx">args</span><span class="p">:</span> <span class="p">(</span><span class="nb">RegExp</span> <span class="o">|</span> <span class="kr">string</span><span class="p">)[]</span> <span class="o">|</span> <span class="kr">any</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="kr">string</span><span class="p">,</span> <span class="c1">// &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; Change this</span>
    <span class="nx">optional</span><span class="p">:</span> <span class="p">(</span><span class="nx">re</span><span class="p">:</span> <span class="nb">RegExp</span> <span class="o">|</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="kr">string</span><span class="p">,</span>
    <span class="nx">anyNumberOfTimes</span><span class="p">:</span> <span class="p">(</span><span class="nx">re</span><span class="p">:</span> <span class="nb">RegExp</span> <span class="o">|</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="kr">string</span>
<span class="p">}</span>
<span class="nl">newInstance</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">HLJSApi</span>
</code></pre></div></div>

<p>Create patch using <code class="language-plaintext highlighter-rouge">npx</code>:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx patch-package highlight.js
</code></pre></div></div>

<p>Patch file is created at <code class="language-plaintext highlighter-rouge">/patches</code> folder, it looks this:</p>

<p>Filename: <code class="language-plaintext highlighter-rouge">highlight.js+11.9.0.patch</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>diff --git a/node_modules/highlight.js/types/index.d.ts b/node_modules/highlight.js/types/index.d.ts
index 1941e61..8b4d959 100644
--- a/node_modules/highlight.js/types/index.d.ts
+++ b/node_modules/highlight.js/types/index.d.ts
@@ -53,7 +53,7 @@ declare module 'highlight.js' {
         regex: {
             concat: (...args: (RegExp | string)[]) =&gt; string,
             lookahead: (re: RegExp | string) =&gt; string,
-            either: (...args: (RegExp | string)[] | [...(RegExp | string)[], RegexEitherOptions]) =&gt; string,
+            either: (...args: any) =&gt; string, // &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; Change this
             optional: (re: RegExp | string) =&gt; string,
             anyNumberOfTimes: (re: RegExp | string) =&gt; string
         }
</code></pre></div></div>]]></content><author><name>Yongjie Zhuang</name></author><category term="Learning" /><summary type="html"><![CDATA[Credits:]]></summary></entry><entry><title type="html">Algorithm - Kmp</title><link href="https://curtisnewbie.github.io/learning/2024/07/25/algo-kmp.html" rel="alternate" type="text/html" title="Algorithm - Kmp" /><published>2024-07-25T09:00:00+08:00</published><updated>2024-07-25T09:00:00+08:00</updated><id>https://curtisnewbie.github.io/learning/2024/07/25/algo-kmp</id><content type="html" xml:base="https://curtisnewbie.github.io/learning/2024/07/25/algo-kmp.html"><![CDATA[<h2 id="kmp-algorithm">KMP Algorithm</h2>

<p>KMP is essentially finding common prefix within the substring.</p>

<p>Create a <code class="language-plaintext highlighter-rouge">next</code> (index) array, for each character in substring, find the previous character that also share the same prefix as the current substring. In the process of finding substring, when we find a mismatch, we can use this <code class="language-plaintext highlighter-rouge">next</code> (index) array to jump back to the previous character that matches current substring without needing to traverse the whole substring again.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>substring: `abeabc`
next: `[0,0,0,1,2,0]`

substring: `aaa`
next: `[0,1,2]`

substring: `abcabc`
next: `[0,0,0,1,2,3]`
</code></pre></div></div>

<p>E.g., in <code class="language-plaintext highlighter-rouge">abcabc</code>, substring [0:3] (<code class="language-plaintext highlighter-rouge">abc</code>) doesn’t share any prefix, when we find a mismatch, we always go back to 0 index. For index 3 (<code class="language-plaintext highlighter-rouge">a</code>), it shares the same prefix with substring [0:1] (<code class="language-plaintext highlighter-rouge">a</code>), so when we find a mismatch at index 4 (<code class="language-plaintext highlighter-rouge">abcab</code>), we jump back to next[4-1] = 1, because we know previous character is <code class="language-plaintext highlighter-rouge">a</code> and the first character is also <code class="language-plaintext highlighter-rouge">a</code> (by building the next array). For index 4 (<code class="language-plaintext highlighter-rouge">b</code>, substring[3:5], <code class="language-plaintext highlighter-rouge">ab</code>), it shares the same prefix with substring [0:2] (<code class="language-plaintext highlighter-rouge">ab</code>), so the value of next[4] is 2.</p>

<p>Java:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">kmp</span><span class="o">(</span><span class="nc">String</span> <span class="n">source</span><span class="o">,</span> <span class="nc">String</span> <span class="n">sub</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">next</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">sub</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sub</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span> <span class="o">++)</span> <span class="o">{</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">j</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">sub</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">!=</span> <span class="n">sub</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">j</span> <span class="o">=</span> <span class="n">next</span><span class="o">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">sub</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="n">sub</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">j</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="n">next</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">source</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">j</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">source</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">!=</span> <span class="n">sub</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">j</span> <span class="o">=</span> <span class="n">next</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">source</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="n">sub</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">j</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">j</span> <span class="o">==</span> <span class="n">sub</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">i</span> <span class="o">-</span> <span class="n">sub</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Go:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">Kmp</span><span class="p">(</span><span class="n">source</span> <span class="kt">string</span><span class="p">,</span> <span class="n">sub</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="n">sour</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">rune</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
	<span class="n">subr</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">rune</span><span class="p">(</span><span class="n">sub</span><span class="p">)</span>
	<span class="n">next</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">subr</span><span class="p">))</span>
	<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">:=</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">subr</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">for</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="o">&amp;&amp;</span> <span class="n">subr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">subr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="p">{</span>
			<span class="n">j</span> <span class="o">=</span> <span class="n">next</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="m">1</span><span class="p">]</span>
		<span class="p">}</span>

		<span class="k">if</span> <span class="n">subr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">subr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="p">{</span>
			<span class="n">j</span><span class="o">++</span>
		<span class="p">}</span>
		<span class="n">next</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">j</span>
	<span class="p">}</span>

	<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">:=</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">sour</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">for</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="o">&amp;&amp;</span> <span class="n">sour</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">sour</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="p">{</span>
			<span class="n">j</span> <span class="o">=</span> <span class="n">next</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="m">1</span><span class="p">]</span>
		<span class="p">}</span>
		<span class="k">if</span> <span class="n">sour</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">sour</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="p">{</span>
			<span class="n">j</span><span class="o">++</span>
		<span class="p">}</span>
		<span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">subr</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">return</span> <span class="n">i</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">subr</span><span class="p">)</span> <span class="o">+</span> <span class="m">1</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="o">-</span><span class="m">1</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Yongjie Zhuang</name></author><category term="Learning" /><summary type="html"><![CDATA[KMP Algorithm]]></summary></entry><entry><title type="html">Make mvn faster</title><link href="https://curtisnewbie.github.io/learning/2024/06/27/make-mvn-faster.html" rel="alternate" type="text/html" title="Make mvn faster" /><published>2024-06-27T17:00:00+08:00</published><updated>2024-06-27T17:00:00+08:00</updated><id>https://curtisnewbie.github.io/learning/2024/06/27/make-mvn-faster</id><content type="html" xml:base="https://curtisnewbie.github.io/learning/2024/06/27/make-mvn-faster.html"><![CDATA[<h3 id="1-brief">1. Brief</h3>

<p>The followings are some of the tricks that I am using to make mvn run faster, all of these ideas are from the Internet, but unfortunately I forgot where they were from.</p>

<p>These tricks indeed work on my machine (Macbook Pro m2 and m3) with noticeable speedup, but I recommend you to always measure the result before you make any judgement.</p>

<p>How much these tricks improve the performance may also depend on your project, dependencies and so on.</p>

<h3 id="2-tricks">2. Tricks</h3>

<h4 id="21-enable-multi-threading">2.1 Enable multi-threading</h4>

<p>Compiling code with multiple threads may speed up the process a little bit, though it depends on whether your dependencies support multi-threading.</p>

<p>In the following example, we are compiling with <code class="language-plaintext highlighter-rouge">Num of Cores * 1</code> threads. E.g., <code class="language-plaintext highlighter-rouge">2C</code> is equivalent to <code class="language-plaintext highlighter-rouge">Num of Cores * 2</code>.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn compile <span class="nt">-T</span> 1C
</code></pre></div></div>

<p>You can also explicitly configure exactly how many threads you want to use:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 2 threads</span>
mvn compile <span class="nt">-T</span> 2
</code></pre></div></div>

<h4 id="22-enable-offline-mode">2.2 Enable offline mode</h4>

<p>Enable offline mode allows you to compile project without attempting to pull remote dependencies. It’s useful if you know that you have already got the latest dependencies or you simply don’t care. This can bring huge performance boost, especially if your network is unacceptably slow.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn compile <span class="nt">-o</span>
</code></pre></div></div>

<h4 id="23-skip-running-tests">2.3. Skip running tests</h4>

<p>With this flag included, tests are compiled but not executed.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn compile <span class="nt">-DskipTests</span>
</code></pre></div></div>

<h4 id="24-skip-compiling-tests">2.4. Skip compiling tests</h4>

<p>With this flag included, test artifacts for the project are not compiled at all.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn compile <span class="nt">-Dmaven</span>.test.skip<span class="o">=</span><span class="nb">true</span>
</code></pre></div></div>

<h4 id="25-skip-javadoc-generation">2.5. Skip javadoc generation</h4>

<p>If you are deploying packages to remote repository as dependencies, then you should almost always include JavaDoc in the generated packages.</p>

<p>However, if you are just compiling the code for testing or deployment (as an app), then you don’t really need the javadoc. You can skip the javadoc generation as below to speed up the process.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn compile <span class="nt">-Dmaven</span>.javadoc.skip<span class="o">=</span><span class="nb">true</span>
</code></pre></div></div>

<p>You can also disable javadoc linting as below:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn compile <span class="nt">-DadditionalJOption</span><span class="o">=</span><span class="nt">-Xdoclint</span>:none
</code></pre></div></div>

<h4 id="26-disable-mvn-jvm-tieredcompilation-and-increase-heap-size">2.6. Disable mvn JVM TieredCompilation and increase heap size</h4>

<p>As we all know that JVM uses JIT to optimize bytecode in runtime. During the Java program execution, JVM identifies hot spots and rewrites the bytecode to make things faster. In other words, JVM is frequently recompiling our code.</p>

<p>JIT is great for long-running Java program, but it’s not gonna be very helpful for mvn. We can disable C2 compiler and leave C1 compiler only as below:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">MAVEN_OPTS</span><span class="o">=</span><span class="s2">"-XX:+TieredCompilation -XX:TieredStopAtLevel=1"</span>
</code></pre></div></div>

<p>(<code class="language-plaintext highlighter-rouge">-XX:+TieredCompilation</code> is multi-tier JIT, which is by default enabled in jdk8+. Tier-0 means only using interpreter).</p>

<p>We can also increase the size of the heap space for mvn to help it’s compilation, which is a quite memory extensive task. Then, we have:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">MAVEN_OPTS</span><span class="o">=</span><span class="s2">"-Xmx1000m -XX:+TieredCompilation -XX:TieredStopAtLevel=1"</span>
</code></pre></div></div>

<h3 id="3-result">3. Result</h3>

<p>Put them all together, we have following command:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">MAVEN_OPTS</span><span class="o">=</span><span class="s2">"-Xmx1000m -XX:+TieredCompilation -XX:TieredStopAtLevel=1"</span>

mvn compile <span class="nt">-T</span> 1C <span class="nt">-o</span> <span class="nt">-Dmaven</span>.javadoc.skip<span class="o">=</span><span class="nb">true</span> <span class="nt">-Dmaven</span>.test.skip<span class="o">=</span><span class="nb">true</span> <span class="nt">-DadditionalJOption</span><span class="o">=</span><span class="nt">-Xdoclint</span>:none <span class="nt">-DskipTests</span>
</code></pre></div></div>

<p>Below is a comparison between normal <code class="language-plaintext highlighter-rouge">mvn compile</code> and the one without all of the optimization mentioned above.</p>

<h3 id="4-experiment">4. Experiment</h3>

<p>The experiment only demonstrates the potential improvement these tricks bring, it may differ for different projects on different machines.</p>

<ul>
  <li>Same maven project (classic spring-boot style webapp)</li>
  <li>MacBook Pro 2022 M2 16GB</li>
  <li>Three attempts for each.</li>
</ul>

<p>Without optimization:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">unset </span>MAVEN_OPTS

mvn compile
</code></pre></div></div>

<ol>
  <li>1st Attempt: <code class="language-plaintext highlighter-rouge">Total time:  13.380 s</code></li>
  <li>2nd Attempt: <code class="language-plaintext highlighter-rouge">Total time:  13.373 s</code></li>
  <li>3rd Attempt: <code class="language-plaintext highlighter-rouge">Total time:  13.178 s</code></li>
</ol>

<p>With all the optimization:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">MAVEN_OPTS</span><span class="o">=</span><span class="s2">"-Xmx1000m -XX:+TieredCompilation -XX:TieredStopAtLevel=1"</span>

mvn compile <span class="nt">-T</span> 1C <span class="nt">-o</span> <span class="nt">-Dmaven</span>.javadoc.skip<span class="o">=</span><span class="nb">true</span> <span class="nt">-Dmaven</span>.test.skip<span class="o">=</span><span class="nb">true</span> <span class="nt">-DadditionalJOption</span><span class="o">=</span><span class="nt">-Xdoclint</span>:none <span class="nt">-DskipTests</span>
</code></pre></div></div>

<ol>
  <li>1st Attempt: <code class="language-plaintext highlighter-rouge">Total time:  7.032 s</code></li>
  <li>2nd Attempt: <code class="language-plaintext highlighter-rouge">Total time:  6.979 s</code></li>
  <li>3rd Attempt: <code class="language-plaintext highlighter-rouge">Total time:  7.182 s</code></li>
</ol>

<p>The <code class="language-plaintext highlighter-rouge">'Total time'</code> shown above is copied from the output of <code class="language-plaintext highlighter-rouge">mvn compile</code> command.</p>

<h3 id="5-more-on-install-and-deploy">5. More on install and deploy</h3>

<p>If you are installing / deploying a specific submodule in a project (e.g., submodule being a dependency for other apps), you can choose to install or deploy that specific submodule without recompiling other modules.</p>

<p>Imagine that our project is called <code class="language-plaintext highlighter-rouge">myapp</code>, and we are trying to install a submodule called <code class="language-plaintext highlighter-rouge">myapp-api</code>, then we can install this submodule using following command:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn <span class="nb">install</span> <span class="nt">-pl</span> myapp-api
</code></pre></div></div>

<p>It’s the same if we are deploying the submodule:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn deploy <span class="nt">-pl</span> myapp-api
</code></pre></div></div>

<p>This can also speed up the process quite a lot.</p>]]></content><author><name>Yongjie Zhuang</name></author><category term="Learning" /><summary type="html"><![CDATA[1. Brief]]></summary></entry><entry><title type="html">Explore LLM using LangChain and HuggingFace</title><link href="https://curtisnewbie.github.io/learning/2024/06/24/explore-llm-using-langchain-and-huggingface.html" rel="alternate" type="text/html" title="Explore LLM using LangChain and HuggingFace" /><published>2024-06-24T09:00:00+08:00</published><updated>2024-06-24T09:00:00+08:00</updated><id>https://curtisnewbie.github.io/learning/2024/06/24/explore-llm-using-langchain-and-huggingface</id><content type="html" xml:base="https://curtisnewbie.github.io/learning/2024/06/24/explore-llm-using-langchain-and-huggingface.html"><![CDATA[<h2 id="relevant-sites">Relevant Sites</h2>

<ul>
  <li><a href="https://python.langchain.com/v0.2/docs/introduction/">LangChain v0.2 Doc</a></li>
  <li><a href="https://github.com/langchain-ai/langchain">LangChain Github</a></li>
  <li><a href="https://huggingface.co/docs/hub/en/models-downloading">Download HuggingFace Model</a></li>
  <li><a href="https://huggingface.co/microsoft/Phi-3-mini-4k-instruct">HuggingFace - Microsoft/Phi-3-mini-4k-instruct</a></li>
  <li><a href="https://huggingface.co/blog/langchain">Blog - HuggingFace LangChain Partner Package</a></li>
  <li><a href="https://huggingface.co/TinyLlama/TinyLlama-1.1B-Chat-v1.0">HuggingFace - TinyLlama/TinyLlama-1.1B-Chat-v1.0</a></li>
  <li><a href="https://huggingface.co/TinyLlama/TinyLlama_v1.1">HuggingFace - TinyLlama/TinyLlama_v1.1</a></li>
  <li><a href="https://huggingface.co/TinyLlama/TinyLlama_v1.1_chinese">HuggingFace - TinyLlama/TinyLlama_v1.1_chinese</a></li>
  <li><a href="https://discuss.huggingface.co/t/llama-7b-gpu-memory-requirement/34323/7">HuggingFace Discussion - LLaMA 7B GPU Memory Requirement</a></li>
  <li><a href="https://huggingface.co/docs/hub/en/models-downloading">HuggingFace - Download Modesl</a></li>
  <li><a href="https://python.langchain.com/v0.2/docs/tutorials/chatbot/">LangChain - Chatbot</a></li>
  <li><a href="https://python.langchain.com/v0.2/docs/tutorials/qa_chat_history/">LangChain - Conversational RAG</a></li>
  <li><a href="https://python.langchain.com/v0.2/docs/tutorials/rag/">LangChain - Build a Retrieval Augmented Generation (RAG) App</a></li>
  <li><a href="https://python.langchain.com/v0.2/docs/integrations/vectorstores/chroma/">LangChain - Chroma (Vector Store)</a></li>
  <li><a href="https://python.langchain.com/v0.1/docs/modules/data_connection/vectorstores/">LangChain - Vector Stores</a></li>
  <li><a href="https://huggingface.co/Qwen/Qwen-1_8B-Chat-Int4">HuggingFace - Qwen/Qwen-1_8B-Chat-Int4</a></li>
  <li><a href="https://github.com/QwenLM/Qwen?tab=readme-ov-file#quantization">Github - QwenLM/Qwen</a></li>
  <li><a href="https://gist.github.com/CurtisNewbie/9d220701b4dd7f3ce00e728317ca1436">Gist CurtisNewbie - Qwen/Qwen-1_8B-Chat-Int4 Demo</a></li>
  <li><a href="https://huggingface.co/blog/4bit-transformers-bitsandbytes">HuggingFace - 4bit Quantization</a></li>
  <li><a href="https://huggingface.co/docs/bitsandbytes/main/en/installation">HuggingFace - bitsandbytes for Quantization</a></li>
  <li><a href="https://python.langchain.com/v0.1/docs/modules/data_connection/retrievers/vectorstore/">LangChain - Vector store-backed retriever</a></li>
  <li><a href="https://github.com/zylon-ai/private-gpt">Private GPT</a></li>
</ul>

<h2 id="getting-started">Getting Started</h2>

<p>Install langchain</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 <span class="nt">-m</span> pip <span class="nb">install </span>langchain
</code></pre></div></div>

<p>Setup langsmith (https://smith.langchain.com/), but it’s not really needed, we may well just skip this.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">LANGCHAIN_TRACING_V2</span><span class="o">=</span><span class="s2">"true"</span>
<span class="nb">export </span><span class="nv">LANGCHAIN_API_KEY</span><span class="o">=</span><span class="s2">"..."</span>
</code></pre></div></div>

<p>Use LangChain with HuggingFace</p>

<ul>
  <li>https://python.langchain.com/v0.2/docs/integrations/platforms/huggingface/</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 <span class="nt">-m</span> pip <span class="nb">install </span>langchain-huggingface
python3 <span class="nt">-m</span> pip <span class="nb">install</span> <span class="nt">--upgrade</span> <span class="nt">--quiet</span>  transformers <span class="nt">--quiet</span>
</code></pre></div></div>

<p>Load the HuggingFace model locally (TinyLlama/TinyLlama-1.1B-Chat-v1.0), it’s a 1.1b model, I am running it on Macbook Pro M2 16GB. My laptop cannot handle Model with over 3b parameters.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFacePipeline</span>

<span class="n">hf</span> <span class="o">=</span> <span class="n">HuggingFacePipeline</span><span class="p">.</span><span class="n">from_model_id</span><span class="p">(</span>
    <span class="n">model_id</span><span class="o">=</span><span class="s">"TinyLlama/TinyLlama-1.1B-Chat-v1.0"</span><span class="p">,</span>
    <span class="n">task</span><span class="o">=</span><span class="s">"text-generation"</span><span class="p">,</span>
    <span class="n">pipeline_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s">"max_new_tokens"</span><span class="p">:</span> <span class="mi">150</span><span class="p">},</span>
<span class="p">)</span>
</code></pre></div></div>

<p>Task is what the model can handle. In this case, we are using a <code class="language-plaintext highlighter-rouge">text-generation</code> model. Which task should we specify depends on what we are doing, a model may be capable of multiple tasks.</p>

<p><img src="/assets/images/hugging-face-search-task.png" alt="assets/images/hugging-face-search-task.png" /></p>

<blockquote>
  <p>Searching models based on tasks on HuggingFace.</p>
</blockquote>

<p>Create Prompt Template (will get much better response):</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">langchain_core.prompts</span> <span class="kn">import</span> <span class="n">PromptTemplate</span>

<span class="c1"># prompt template
</span><span class="n">template</span> <span class="o">=</span> <span class="s">"""Question: {question}

Answer: Let's think step by step."""</span>
<span class="n">prompt</span> <span class="o">=</span> <span class="n">PromptTemplate</span><span class="p">.</span><span class="n">from_template</span><span class="p">(</span><span class="n">template</span><span class="p">)</span>

<span class="c1"># bind local langchain to the prompt
</span><span class="n">chain</span> <span class="o">=</span> <span class="n">prompt</span> <span class="o">|</span> <span class="n">hf</span><span class="p">.</span><span class="n">bind</span><span class="p">()</span>

<span class="n">q</span> <span class="o">=</span> <span class="s">"How to brew coffee?"</span>
<span class="k">print</span><span class="p">(</span><span class="n">chain</span><span class="p">.</span><span class="n">invoke</span><span class="p">({</span><span class="s">"question"</span><span class="p">:</span> <span class="n">q</span><span class="p">}))</span>
</code></pre></div></div>

<p>We can also invoke the model directly without PromptTemplate, but the response is worse:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">hf</span><span class="p">.</span><span class="n">invoke</span><span class="p">(</span><span class="s">"How to brew coffee?"</span><span class="p">))</span>
</code></pre></div></div>

<p>A working example is available at: <a href="https://github.com/CurtisNewbie/llm_stuff/blob/main/tinyllama.py">github.com/CurtisNewbie/llm_stuff/blob/main/tinyllama.py</a></p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">langchain_core.prompts</span> <span class="kn">import</span> <span class="n">PromptTemplate</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">readline</span>
<span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFacePipeline</span>

<span class="n">hf</span> <span class="o">=</span> <span class="n">HuggingFacePipeline</span><span class="p">.</span><span class="n">from_model_id</span><span class="p">(</span>
    <span class="n">model_id</span><span class="o">=</span><span class="s">"TinyLlama/TinyLlama-1.1B-Chat-v1.0"</span><span class="p">,</span>
    <span class="n">task</span><span class="o">=</span><span class="s">"text-generation"</span><span class="p">,</span>
    <span class="n">pipeline_kwargs</span><span class="o">=</span><span class="p">{</span>
        <span class="s">"max_new_tokens"</span><span class="p">:</span> <span class="mi">150</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">model_kwargs</span><span class="o">=</span><span class="p">{</span>
        <span class="s">"temperature"</span><span class="p">:</span> <span class="mf">0.7</span><span class="p">,</span>
        <span class="s">"top_k"</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span>
        <span class="s">"top_p"</span><span class="p">:</span> <span class="mf">0.95</span><span class="p">,</span>
        <span class="s">"do_sample"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">)</span>

<span class="n">template</span> <span class="o">=</span> <span class="s">"""Question: {question}

Answer: Let's think step by step."""</span>
<span class="n">prompt</span> <span class="o">=</span> <span class="n">PromptTemplate</span><span class="p">.</span><span class="n">from_template</span><span class="p">(</span><span class="n">template</span><span class="p">)</span>

<span class="n">chain</span> <span class="o">=</span> <span class="n">prompt</span> <span class="o">|</span> <span class="n">hf</span><span class="p">.</span><span class="n">bind</span><span class="p">()</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Enter your question:"</span><span class="p">)</span>
        <span class="n">q</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span><span class="p">().</span><span class="n">strip</span><span class="p">()</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">q</span><span class="p">:</span> <span class="k">continue</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">chain</span><span class="p">.</span><span class="n">invoke</span><span class="p">({</span><span class="s">"question"</span><span class="p">:</span> <span class="n">q</span><span class="p">})</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="se">\n\n</span><span class="s">&gt; model: '</span><span class="si">{</span><span class="n">resp</span><span class="si">}</span><span class="s">'</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>

    <span class="k">except</span> <span class="nb">InterruptedError</span><span class="p">:</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Exception caught </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<p>If the model supports streaming, we can change the code like the following. If the model doesn’t support streaming then the method call is simply blocked returning only one single chunk:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">chain</span><span class="p">.</span><span class="n">stream</span><span class="p">({</span><span class="s">"question"</span><span class="p">:</span> <span class="n">q</span><span class="p">}):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">chunk</span><span class="p">,</span> <span class="n">flush</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="retrieval-augmented-generation-rag">Retrieval Augmented Generation (RAG)</h2>

<ul>
  <li><a href="https://python.langchain.com/v0.2/docs/tutorials/rag/">LangChain - Build a Retrieval Augmented Generation (RAG) App</a></li>
  <li><a href="https://python.langchain.com/v0.2/docs/integrations/vectorstores/chroma/">LangChain - Chroma (Vector Store)</a></li>
</ul>

<p>RAG is a way to connect LLM model with external sources. In LangChain’s RAG tutorial, an OpenAI model is used and connected to a online document parsed using bs4.</p>

<p>In essence, RAG involves indexing the data (documents), storing the indexes in vector database, retrieving the context from the vector database (based on similarity,
i.e., Similarity Search) for the question, and finally adding the context to the prompt that is passed to the LLM model.</p>

<p>The following images are from LangChain.</p>

<p><img src="https://python.langchain.com/v0.2/assets/images/rag_indexing-8160f90a90a33253d0154659cf7d453f.png" height="350px" /></p>

<p><img src="https://python.langchain.com/v0.2/assets/images/rag_retrieval_generation-1046a4668d6bb08786ef73c56d4f228a.png" height="350px" /></p>

<p>Install relevant dependencies. Chroma is a vector database.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">python3</span> <span class="o">-</span><span class="n">m</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">langchain</span> <span class="n">langchain_community</span> <span class="n">langchain_chroma</span>
</code></pre></div></div>

<p>First of all, we create a LangChain pipeline for the model:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">langchain_core.prompts</span> <span class="kn">import</span> <span class="n">PromptTemplate</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">traceback</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">readline</span>
<span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFacePipeline</span>

<span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">300</span>
<span class="n">task</span><span class="o">=</span><span class="s">"text-generation"</span>
<span class="n">model</span><span class="o">=</span><span class="s">"TinyLlama/TinyLlama-1.1B-Chat-v1.0"</span>

<span class="n">hf</span> <span class="o">=</span> <span class="n">HuggingFacePipeline</span><span class="p">.</span><span class="n">from_model_id</span><span class="p">(</span>
    <span class="n">model_id</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>
    <span class="n">task</span><span class="o">=</span><span class="n">task</span><span class="p">,</span>
    <span class="n">pipeline_kwargs</span><span class="o">=</span><span class="p">{</span>
        <span class="s">"max_new_tokens"</span><span class="p">:</span> <span class="n">max_new_tokens</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">model_kwargs</span><span class="o">=</span><span class="p">{</span>
        <span class="s">"temperature"</span><span class="p">:</span> <span class="mf">0.7</span><span class="p">,</span>
        <span class="s">"top_k"</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span>
        <span class="s">"top_p"</span><span class="p">:</span> <span class="mf">0.95</span><span class="p">,</span>
        <span class="s">"do_sample"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">)</span>
</code></pre></div></div>

<p>Import DocumentLoader to load external documents. Import Splitter to break documents into chunks. Import Embeddings to create a vector representation of text that is stored in a vector database.</p>

<p>In the following code, the retriever is created from the vector database. Retriever is simply a concept that accepts a string query and returns a list of documents,
in this case, it’s doing similarity search based on the question asked.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">langchain_chroma</span> <span class="kn">import</span> <span class="n">Chroma</span>
<span class="kn">from</span> <span class="nn">langchain_community.document_loaders</span> <span class="kn">import</span> <span class="n">TextLoader</span>
<span class="kn">from</span> <span class="nn">langchain_text_splitters</span> <span class="kn">import</span> <span class="n">CharacterTextSplitter</span>
<span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEmbeddings</span>
<span class="kn">from</span> <span class="nn">langchain_core.runnables</span> <span class="kn">import</span> <span class="n">RunnablePassthrough</span>

<span class="c1"># load the local document
</span><span class="n">files</span> <span class="o">=</span> <span class="p">[</span><span class="s">"about_onecafe.txt"</span><span class="p">]</span>
<span class="n">documents</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span> <span class="n">documents</span><span class="p">.</span><span class="n">extend</span><span class="p">(</span><span class="n">TextLoader</span><span class="p">(</span><span class="n">f</span><span class="p">).</span><span class="n">load</span><span class="p">())</span>

<span class="c1"># split documents into chunks
</span><span class="n">text_splitter</span> <span class="o">=</span> <span class="n">CharacterTextSplitter</span><span class="p">(</span><span class="n">chunk_size</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">chunk_overlap</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">docs</span> <span class="o">=</span> <span class="n">text_splitter</span><span class="p">.</span><span class="n">split_documents</span><span class="p">(</span><span class="n">documents</span><span class="p">)</span>

<span class="c1"># create Embedding function to convert each piece of text to vector
</span><span class="n">embed</span> <span class="o">=</span> <span class="n">HuggingFaceEmbeddings</span><span class="p">()</span>

<span class="c1"># store documents into Chroma (in memory)
</span><span class="n">vec</span> <span class="o">=</span> <span class="n">Chroma</span><span class="p">.</span><span class="n">from_documents</span><span class="p">(</span><span class="n">docs</span><span class="p">,</span> <span class="n">embed</span><span class="p">)</span>

<span class="c1"># create retriever from the vector database
</span><span class="n">retriever</span> <span class="o">=</span> <span class="n">vec</span><span class="p">.</span><span class="n">as_retriever</span><span class="p">(</span><span class="n">search_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s">"k"</span><span class="p">:</span> <span class="mi">1</span><span class="p">})</span> <span class="c1"># default: k is 4
</span></code></pre></div></div>

<p>With all the Loader, Splitter, Embeddings, Vector Database and Retriever setup, we can construct a chain that automatically complete the context for the LLM model.</p>

<p>The prompt template is slightly different, it now contains a context section for the LLM model (It’s copied from LangSmith). The content of <code class="language-plaintext highlighter-rouge">{context}</code> actually comes from the vector database using the Retriever that we just created.</p>

<p>The <code class="language-plaintext highlighter-rouge">RunnablePassthrough()</code> does nothing, it just passes the query to <code class="language-plaintext highlighter-rouge">{question}</code> section.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">format_docs</span><span class="p">(</span><span class="n">docs</span><span class="p">):</span>
    <span class="k">return</span> <span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">doc</span><span class="p">.</span><span class="n">page_content</span> <span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="n">docs</span><span class="p">)</span>

<span class="n">template</span> <span class="o">=</span> <span class="s">"""You are an assistant for question-answering tasks. Use the following pieces of retrieved context to answer the question. If you don't know the answer, just say that you don't know. Use three sentences maximum and keep the answer concise.

Question: {question}

Context: {context}

Answer:"""</span>
<span class="n">prompt</span> <span class="o">=</span> <span class="n">PromptTemplate</span><span class="p">.</span><span class="n">from_template</span><span class="p">(</span><span class="n">template</span><span class="p">)</span>

<span class="n">chain</span> <span class="o">=</span> <span class="p">(</span>
    <span class="p">{</span><span class="s">"context"</span><span class="p">:</span> <span class="n">retriever</span> <span class="o">|</span> <span class="n">format_docs</span><span class="p">,</span> <span class="s">"question"</span><span class="p">:</span> <span class="n">RunnablePassthrough</span><span class="p">()}</span>
    <span class="o">|</span> <span class="n">prompt</span>
    <span class="o">|</span> <span class="n">hf</span><span class="p">.</span><span class="n">bind</span><span class="p">()</span>
<span class="p">)</span>
</code></pre></div></div>

<p>Finally, we just invoke the chain with our question:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">chain</span><span class="p">.</span><span class="n">invoke</span><span class="p">(</span><span class="s">"What is LLM model?"</span><span class="p">))</span>
</code></pre></div></div>

<p>A working example is available at: <a href="https://github.com/CurtisNewbie/llm_stuff/blob/main/tinyllama_rag.py">github.com/CurtisNewbie/llm_stuff/blob/main/tinyllama_rag.py</a></p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">langchain_core.prompts</span> <span class="kn">import</span> <span class="n">PromptTemplate</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">traceback</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">readline</span>
<span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFacePipeline</span>

<span class="n">max_new_tokens</span><span class="o">=</span><span class="mi">300</span>
<span class="n">task</span><span class="o">=</span><span class="s">"text-generation"</span>
<span class="n">model</span><span class="o">=</span><span class="s">"TinyLlama/TinyLlama-1.1B-Chat-v1.0"</span>

<span class="n">hf</span> <span class="o">=</span> <span class="n">HuggingFacePipeline</span><span class="p">.</span><span class="n">from_model_id</span><span class="p">(</span>
    <span class="n">model_id</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>
    <span class="n">task</span><span class="o">=</span><span class="n">task</span><span class="p">,</span>
    <span class="n">pipeline_kwargs</span><span class="o">=</span><span class="p">{</span>
        <span class="s">"max_new_tokens"</span><span class="p">:</span> <span class="n">max_new_tokens</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">model_kwargs</span><span class="o">=</span><span class="p">{</span>
        <span class="s">"temperature"</span><span class="p">:</span> <span class="mf">0.7</span><span class="p">,</span>
        <span class="s">"top_k"</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span>
        <span class="s">"top_p"</span><span class="p">:</span> <span class="mf">0.95</span><span class="p">,</span>
        <span class="s">"do_sample"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">)</span>

<span class="kn">from</span> <span class="nn">langchain_chroma</span> <span class="kn">import</span> <span class="n">Chroma</span>
<span class="kn">from</span> <span class="nn">langchain_community.document_loaders</span> <span class="kn">import</span> <span class="n">TextLoader</span>
<span class="kn">from</span> <span class="nn">langchain_text_splitters</span> <span class="kn">import</span> <span class="n">CharacterTextSplitter</span>
<span class="kn">from</span> <span class="nn">langchain_huggingface</span> <span class="kn">import</span> <span class="n">HuggingFaceEmbeddings</span>
<span class="kn">from</span> <span class="nn">langchain_core.runnables</span> <span class="kn">import</span> <span class="n">RunnablePassthrough</span>

<span class="c1"># load the document and split it into chunks
</span><span class="n">files</span> <span class="o">=</span> <span class="p">[</span><span class="s">"about_onecafe.txt"</span><span class="p">]</span>
<span class="n">documents</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
    <span class="n">documents</span><span class="p">.</span><span class="n">extend</span><span class="p">(</span><span class="n">TextLoader</span><span class="p">(</span><span class="n">f</span><span class="p">).</span><span class="n">load</span><span class="p">())</span>

<span class="c1"># split it into chunks
</span><span class="n">text_splitter</span> <span class="o">=</span> <span class="n">CharacterTextSplitter</span><span class="p">(</span><span class="n">chunk_size</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">chunk_overlap</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">docs</span> <span class="o">=</span> <span class="n">text_splitter</span><span class="p">.</span><span class="n">split_documents</span><span class="p">(</span><span class="n">documents</span><span class="p">)</span>

<span class="c1"># create the open-source embedding function (also a model)
</span><span class="n">embed</span> <span class="o">=</span> <span class="n">HuggingFaceEmbeddings</span><span class="p">()</span>

<span class="c1"># load it into Chroma
</span><span class="n">vec</span> <span class="o">=</span> <span class="n">Chroma</span><span class="p">.</span><span class="n">from_documents</span><span class="p">(</span><span class="n">docs</span><span class="p">,</span> <span class="n">embed</span><span class="p">)</span>
<span class="n">reti</span> <span class="o">=</span> <span class="n">vec</span><span class="p">.</span><span class="n">as_retriever</span><span class="p">(</span><span class="n">search_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s">"k"</span><span class="p">:</span> <span class="mi">1</span><span class="p">})</span> <span class="c1"># default: k is 4
</span>
<span class="k">def</span> <span class="nf">format_docs</span><span class="p">(</span><span class="n">docs</span><span class="p">):</span>
    <span class="k">return</span> <span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">doc</span><span class="p">.</span><span class="n">page_content</span> <span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="n">docs</span><span class="p">)</span>

<span class="n">template</span> <span class="o">=</span> <span class="s">"""You are an assistant for question-answering tasks. Use the following pieces of retrieved context to answer the question. If you don't know the answer, just say that you don't know. Use three sentences maximum and keep the answer concise.

Question: {question}

Context: {context}

Answer:"""</span>
<span class="n">prompt</span> <span class="o">=</span> <span class="n">PromptTemplate</span><span class="p">.</span><span class="n">from_template</span><span class="p">(</span><span class="n">template</span><span class="p">)</span>

<span class="n">chain</span> <span class="o">=</span> <span class="p">(</span>
    <span class="p">{</span><span class="s">"context"</span><span class="p">:</span> <span class="n">reti</span> <span class="o">|</span> <span class="n">format_docs</span><span class="p">,</span> <span class="s">"question"</span><span class="p">:</span> <span class="n">RunnablePassthrough</span><span class="p">()}</span>
    <span class="o">|</span> <span class="n">prompt</span>
    <span class="o">|</span> <span class="n">hf</span><span class="p">.</span><span class="n">bind</span><span class="p">()</span>
<span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">chain</span><span class="p">.</span><span class="n">invoke</span><span class="p">(</span><span class="s">"Tell me about onecafe"</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="quantization">Quantization</h2>

<ul>
  <li><a href="https://huggingface.co/blog/4bit-transformers-bitsandbytes">HuggingFace - 4bit Quantization</a></li>
  <li><a href="https://huggingface.co/docs/bitsandbytes/main/en/installation">HuggingFace - bitsandbytes for Quantization</a></li>
</ul>

<p>With Quantization (e.g., 4bit), we can reduce the usage of memory, making LLM runs faster. Some models on HuggingFace have already done it without extra configuration, but those may require CUDA support.</p>

<p>Quantization only works on GPU (kinda), include <code class="language-plaintext highlighter-rouge">load_in_4bit=True</code> and <code class="language-plaintext highlighter-rouge">device_map=auto</code> to enable the quantization, but model should support it in the first place.</p>

<p>Quantization needs bitsandbytes:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">python3</span> <span class="o">-</span><span class="n">m</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">bitsandbytes</span>
</code></pre></div></div>

<p>When we create the model, include the args mentioned above:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">hf</span> <span class="o">=</span> <span class="n">HuggingFacePipeline</span><span class="p">.</span><span class="n">from_model_id</span><span class="p">(</span>
    <span class="n">model_id</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>
    <span class="n">task</span><span class="o">=</span><span class="n">task</span><span class="p">,</span>
    <span class="n">pipeline_kwargs</span><span class="o">=</span><span class="p">{</span>
        <span class="s">"max_new_tokens"</span><span class="p">:</span> <span class="n">max_new_tokens</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">model_kwargs</span><span class="o">=</span><span class="p">{</span>
        <span class="s">"temperature"</span><span class="p">:</span> <span class="mf">0.7</span><span class="p">,</span>
        <span class="s">"top_k"</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span>
        <span class="s">"top_p"</span><span class="p">:</span> <span class="mf">0.95</span><span class="p">,</span>
        <span class="s">"do_sample"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
        <span class="s">"load_in_4bit"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="c1"># 4bit quantization
</span>        <span class="s">"device_map"</span><span class="p">:</span><span class="s">"auto"</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="demo---deploy-llm-model-on-centos-with-gpu">Demo - Deploy LLM Model on CentOS with GPU</h2>

<p>This section roughly documents how I setup CUDA and all sort of dependencies to run the LLM Model: <code class="language-plaintext highlighter-rouge">Qwen/Qwen2-7B-Instruct</code> on CentOS
(the setup is roughly the same even if you change to another LLM model).</p>

<p><strong><em>The python code is available in repo: <a href="https://github.com/CurtisNewbie/llm_stuff/tree/main/qwen2_deploy">https://github.com/CurtisNewbie/llm_stuff/tree/main/qwen2_deploy</a></em></strong></p>

<p>You may follow other official guides, e.g., to install Pytorch properly using venv, conda or something else.</p>

<ul>
  <li>https://pytorch.org/get-started/previous-versions/</li>
</ul>

<p>Install nvidia driver, after the installation, check your GPU status using <code class="language-plaintext highlighter-rouge">nvidia-smi</code> command:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvidia-smi

<span class="c"># *** ***  * **:**:** 2024</span>
<span class="c"># +---------------------------------------------------------------------------------------+</span>
<span class="c"># | NVIDIA-SMI 535.154.05             Driver Version: 535.154.05   CUDA Version: 12.2     |</span>
<span class="c"># |-----------------------------------------+----------------------+----------------------+</span>
<span class="c"># | GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |</span>
<span class="c"># | Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |</span>
<span class="c"># |                                         |                      |               MIG M. |</span>
<span class="c"># |=========================================+======================+======================|</span>
<span class="c"># |   0  NVIDIA A10                     On  | 00000000:00:07.0 Off |                    0 |</span>
<span class="c"># |  0%   26C    P8               8W / 150W |      0MiB / 23028MiB |      0%      Default |</span>
<span class="c"># |                                         |                      |                  N/A |</span>
<span class="c"># +-----------------------------------------+----------------------+----------------------+</span>

<span class="c"># +---------------------------------------------------------------------------------------+</span>
<span class="c"># | Processes:                                                                            |</span>
<span class="c"># |  GPU   GI   CI        PID   Type   Process name                            GPU Memory |</span>
<span class="c"># |        ID   ID                                                             Usage      |</span>
<span class="c"># |=======================================================================================|</span>
<span class="c"># |  No running processes found                                                           |</span>
<span class="c"># +---------------------------------------------------------------------------------------+</span>
</code></pre></div></div>

<p>The output above shows that we have a Nvidia A10 GPU installed with 23GB of VRAM available. Notice that even though the output of <code class="language-plaintext highlighter-rouge">nvidia-smi</code> shows <code class="language-plaintext highlighter-rouge">CUDA Version: 12.2</code>, it’s merely a compatible driver version.</p>

<p>If you don’t have CUDA already, install CUDA toolkit instead of CUDA. CUDA is included in CUDA toolkit. Notice that we are using <code class="language-plaintext highlighter-rouge">CUDA12.1</code>, we should make sure that all relavent cuda dependencies support exactly CUDA 12.1.</p>

<ul>
  <li><a href="https://developer.nvidia.com/cuda-12-0-0-download-archive?target_os=Linux&amp;target_arch=x86_64&amp;Distribution=CentOS&amp;target_version=7&amp;target_type=rpm_network">Nvidia CUDA Toolkit 12.0 Downloads</a></li>
  <li><a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html">Nvidia CUDA Toolkit Release Notes</a></li>
  <li><a href="https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/">Nvidia rhel7/x86_64 CUDA Repo Index</a></li>
</ul>

<p>Since we are using CentOS, we use yum package manager. In the above Nvidia websites: select your OS, architecture and distribution; copy paste the generated installation instructions:
(it seems like you don’t actually need <code class="language-plaintext highlighter-rouge">nvidia-driver-latest-dkms</code>, the commands below are exactly what I did anyway).</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Add cuda repo config</span>
<span class="nb">sudo </span>yum-config-manager <span class="nt">--add-repo</span> https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/cuda-rhel7.repo

<span class="c"># clean cache</span>
<span class="nb">sudo </span>yum clean all

<span class="c"># install cuda toolkit, cuda is included</span>
<span class="nb">sudo </span>yum <span class="nt">-y</span> <span class="nb">install </span>cuda-toolkit
</code></pre></div></div>

<p>Check that we have <code class="language-plaintext highlighter-rouge">nvcc</code> installed, <code class="language-plaintext highlighter-rouge">nvcc</code> is Nvidia CUDA Compiler Driver, it should be automatically installed as part of the CUDA toolkit.</p>

<ul>
  <li>https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/</li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvcc <span class="nt">--version</span>
<span class="c"># nvcc: NVIDIA (R) Cuda compiler driver</span>
<span class="c"># Copyright (c) 2005-2023 NVIDIA Corporation</span>
<span class="c"># Built on Mon_Apr__3_17:16:06_PDT_2023</span>
<span class="c"># Cuda compilation tools, release 12.1, V12.1.105</span>
<span class="c"># Build cuda_12.1.r12.1/compiler.32688072_0</span>
</code></pre></div></div>

<p>Install <code class="language-plaintext highlighter-rouge">nccl</code> library. <code class="language-plaintext highlighter-rouge">nccl</code> is NVIDIA Collective Communications Library. PyTorch will attempt to open these <code class="language-plaintext highlighter-rouge">*.so.*</code> lib files provided by nccl.</p>

<ul>
  <li><a href="https://docs.nvidia.com/deeplearning/nccl/user-guide/docs/overview.html#:~:text=The%20NVIDIA%20Collective%20Communications%20Library,be%20easily%20integrated%20into%20applications.">Nvidia Overview of NCCL</a></li>
  <li><a href="https://docs.nvidia.com/deeplearning/nccl/install-guide/index.html">Nvidia NCCL Installation Guide</a></li>
  <li><a href="https://developer.nvidia.com/nccl">Nvidia NCCL</a></li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Add cuda repo config (same repo)</span>
<span class="nb">sudo </span>yum-config-manager <span class="nt">--add-repo</span> https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/cuda-rhel7.repo

<span class="c"># Install libnccl for cuda12.1</span>
yum <span class="nb">install </span>libnccl-2.18.3-1+cuda12.1

yum list installed | <span class="nb">grep </span>nccl
<span class="c"># libnccl.x86_64                                     2.18.3-1+cuda12.1                   @cuda-rhel7-x86_64</span>
</code></pre></div></div>

<p>Have a look at cuda lib location, it should be located at <code class="language-plaintext highlighter-rouge">/usr/local</code></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span> <span class="nt">-l</span> /usr/local/ | <span class="nb">grep </span>cuda
<span class="c"># lrwxrwxrwx   1 root root   21 Jun 28 15:15 cuda -&gt; /usr/local/cuda-12.1/</span>
<span class="c"># drwxr-xr-x  17 root root 4096 Jun 28 15:16 cuda-12.1</span>
</code></pre></div></div>

<p>Install python3.11 (or later versions):</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nb">install </span>python3.11
python3.11 <span class="nt">-m</span> ensurepip
</code></pre></div></div>

<p>As shown below, I wrote two python scripts: one is for loading documents to Qdrant (vector database), another one is for bootstraping the RAG LLM model to server QA queries.
(The model used in this example: <a href="https://huggingface.co/Qwen/Qwen2-7B-Instruct">huggingface.co/Qwen/Qwen2-7B-Instruct</a>)</p>

<p><code class="language-plaintext highlighter-rouge">llm.py</code></p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ...
</span><span class="n">collection_name</span> <span class="o">=</span> <span class="s">"documents"</span>
<span class="n">embedding_name</span> <span class="o">=</span> <span class="s">"sentence-transformers/distiluse-base-multilingual-cased-v1"</span>
<span class="n">max_new_tokens</span> <span class="o">=</span> <span class="mi">300</span>
<span class="n">task</span> <span class="o">=</span> <span class="s">"text-generation"</span>
<span class="n">model</span> <span class="o">=</span> <span class="s">"Qwen/Qwen2-7B-Instruct"</span>
<span class="n">cache_path</span> <span class="o">=</span> <span class="s">"/root/qdrant_cache"</span>

<span class="n">hf</span> <span class="o">=</span> <span class="n">HuggingFacePipeline</span><span class="p">.</span><span class="n">from_model_id</span><span class="p">(</span>
    <span class="n">model_id</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>
    <span class="n">task</span><span class="o">=</span><span class="n">task</span><span class="p">,</span>
    <span class="n">pipeline_kwargs</span><span class="o">=</span><span class="p">{</span>
        <span class="s">"max_new_tokens"</span><span class="p">:</span> <span class="n">max_new_tokens</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="n">model_kwargs</span><span class="o">=</span><span class="p">{</span>
        <span class="s">"temperature"</span><span class="p">:</span> <span class="mf">0.3</span><span class="p">,</span>
        <span class="s">"top_k"</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span>
        <span class="s">"top_p"</span><span class="p">:</span> <span class="mf">0.95</span><span class="p">,</span>
        <span class="s">"do_sample"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
        <span class="s">"load_in_4bit"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">)</span>

<span class="n">embeddings</span> <span class="o">=</span> <span class="n">HuggingFaceEmbeddings</span><span class="p">(</span><span class="n">model_name</span><span class="o">=</span><span class="n">embedding_name</span><span class="p">)</span>
<span class="n">vectorstore</span> <span class="o">=</span> <span class="n">Qdrant</span><span class="p">.</span><span class="n">from_existing_collection</span><span class="p">(</span>
    <span class="n">embedding</span><span class="o">=</span><span class="n">embeddings</span><span class="p">,</span>
    <span class="n">path</span><span class="o">=</span><span class="n">cache_path</span><span class="p">,</span>
    <span class="n">collection_name</span><span class="o">=</span><span class="n">collection_name</span><span class="p">)</span>

<span class="n">template</span> <span class="o">=</span> <span class="s">"""...."""</span>
<span class="n">retriever</span> <span class="o">=</span> <span class="n">vectorstore</span><span class="p">.</span><span class="n">as_retriever</span><span class="p">(</span><span class="n">search_type</span><span class="o">=</span><span class="s">"similarity_score_threshold"</span><span class="p">,</span> <span class="n">search_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s">"score_threshold"</span><span class="p">:</span> <span class="mf">0.2</span><span class="p">})</span>
<span class="n">prompt</span> <span class="o">=</span> <span class="n">PromptTemplate</span><span class="p">.</span><span class="n">from_template</span><span class="p">(</span><span class="n">template</span><span class="p">)</span>
<span class="n">chain</span> <span class="o">=</span> <span class="p">(</span>
    <span class="p">{</span><span class="s">"context"</span><span class="p">:</span> <span class="n">retriever</span> <span class="o">|</span> <span class="n">format_docs</span><span class="p">,</span> <span class="s">"question"</span><span class="p">:</span> <span class="n">RunnablePassthrough</span><span class="p">()}</span>
    <span class="o">|</span> <span class="n">prompt</span>
    <span class="o">|</span> <span class="n">hf</span><span class="p">.</span><span class="n">bind</span><span class="p">()</span>
<span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">chain</span><span class="p">.</span><span class="n">invoke</span><span class="p">(</span><span class="s">"How is the weather today?"</span><span class="p">))</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">qdrant_load.py</code></p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ...
</span><span class="n">collection_name</span> <span class="o">=</span> <span class="s">"documents"</span>
<span class="n">embedding_name</span> <span class="o">=</span> <span class="s">"sentence-transformers/distiluse-base-multilingual-cased-v1"</span>
<span class="n">cache_path</span> <span class="o">=</span> <span class="s">"/root/qdrant_cache"</span>
<span class="n">base_dir</span> <span class="o">=</span> <span class="s">'/root/llm/files'</span>
<span class="n">documents</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">base_dir</span><span class="p">):</span>
    <span class="n">file_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">base_dir</span><span class="p">,</span> <span class="nb">file</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">file</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">'.pdf'</span><span class="p">):</span>
        <span class="n">documents</span><span class="p">.</span><span class="n">extend</span><span class="p">(</span><span class="n">PyPDFLoader</span><span class="p">(</span><span class="n">file_path</span><span class="p">).</span><span class="n">load</span><span class="p">())</span>
    <span class="k">elif</span> <span class="nb">file</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">'.docx'</span><span class="p">):</span>
        <span class="n">documents</span><span class="p">.</span><span class="n">extend</span><span class="p">(</span><span class="n">Docx2txtLoader</span><span class="p">(</span><span class="n">file_path</span><span class="p">).</span><span class="n">load</span><span class="p">())</span>
    <span class="k">elif</span> <span class="nb">file</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">'.txt'</span><span class="p">):</span>
        <span class="n">documents</span><span class="p">.</span><span class="n">extend</span><span class="p">(</span><span class="n">TextLoader</span><span class="p">(</span><span class="n">file_path</span><span class="p">).</span><span class="n">load</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Documents loaded"</span><span class="p">)</span>

<span class="n">text_splitter</span> <span class="o">=</span> <span class="n">RecursiveCharacterTextSplitter</span><span class="p">(</span><span class="n">chunk_size</span><span class="o">=</span><span class="mi">200</span><span class="p">,</span> <span class="n">chunk_overlap</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">chunked_documents</span> <span class="o">=</span> <span class="n">text_splitter</span><span class="p">.</span><span class="n">split_documents</span><span class="p">(</span><span class="n">documents</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Documents splited"</span><span class="p">)</span>

<span class="n">embeddings</span> <span class="o">=</span> <span class="n">HuggingFaceEmbeddings</span><span class="p">(</span><span class="n">model_name</span><span class="o">=</span><span class="n">embedding_name</span><span class="p">,</span> <span class="n">show_progress</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Embeddings loaded"</span><span class="p">)</span>

<span class="n">vectorstore</span> <span class="o">=</span> <span class="n">Qdrant</span><span class="p">.</span><span class="n">from_existing_collection</span><span class="p">(</span>
    <span class="n">embedding</span><span class="o">=</span><span class="n">embeddings</span><span class="p">,</span>
    <span class="n">path</span><span class="o">=</span><span class="n">cache_path</span><span class="p">,</span>
    <span class="n">collection_name</span><span class="o">=</span><span class="n">collection_name</span><span class="p">)</span>

<span class="n">vectorstore</span><span class="p">.</span><span class="n">add_documents</span><span class="p">(</span><span class="n">chunked_documents</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Documents added"</span><span class="p">)</span>
</code></pre></div></div>

<p>Install python dependencies:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3.11 <span class="nt">-m</span> pip <span class="nb">install </span>langchain langchain-huggingface transformers bitsandbytes langchain-community langchain-qdrant accelerate
</code></pre></div></div>

<p>If everything goes right, we can use <code class="language-plaintext highlighter-rouge">qdrant_load.py</code> to load documents, and then we can use <code class="language-plaintext highlighter-rouge">llm.py</code> to load the RAG LLM Model to answer questions.</p>

<p>To create simple ChatUI, we can use <code class="language-plaintext highlighter-rouge">gradio</code>.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3.11 <span class="nt">-m</span> pip <span class="nb">install </span>gradio
</code></pre></div></div>

<p>Change <code class="language-plaintext highlighter-rouge">llm.py</code> to use gradio to serve QA at <code class="language-plaintext highlighter-rouge">0.0.0.0:80</code>:</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">gradio</span> <span class="k">as</span> <span class="n">gr</span>

<span class="k">def</span> <span class="nf">predict</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">history</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">message</span><span class="p">:</span>
        <span class="n">result</span> <span class="o">=</span> <span class="s">"Say something?"</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">chain</span><span class="p">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
    <span class="k">yield</span> <span class="n">result</span>

<span class="n">gr</span><span class="p">.</span><span class="n">ChatInterface</span><span class="p">(</span><span class="n">predict</span><span class="p">).</span><span class="n">queue</span><span class="p">().</span><span class="n">launch</span><span class="p">(</span><span class="n">share</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">server_name</span><span class="o">=</span><span class="s">"0.0.0.0"</span><span class="p">,</span> <span class="n">server_port</span><span class="o">=</span><span class="mi">80</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="potential-issues">Potential Issues</h3>

<h4 id="1-pytorch---importerror-libcuptiso12-cannot-open-shared-object-file-no-such-file-or-directory">1. PyTorch - <code class="language-plaintext highlighter-rouge">ImportError: libcupti.so.12: cannot open shared object file: No such file or directory</code></h4>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...

Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">"/usr/local/lib/python3.11/site-packages/langchain_huggingface/embeddings/huggingface.py"</span>, line 53, <span class="k">in </span>__init__
    import sentence_transformers  <span class="c"># type: ignore[import]</span>
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File <span class="s2">"/usr/local/lib/python3.11/site-packages/sentence_transformers/__init__.py"</span>, line 7, <span class="k">in</span> &lt;module&gt;
    from sentence_transformers.cross_encoder.CrossEncoder import CrossEncoder
  File <span class="s2">"/usr/local/lib/python3.11/site-packages/sentence_transformers/cross_encoder/__init__.py"</span>, line 1, <span class="k">in</span> &lt;module&gt;
    from .CrossEncoder import CrossEncoder
  File <span class="s2">"/usr/local/lib/python3.11/site-packages/sentence_transformers/cross_encoder/CrossEncoder.py"</span>, line 7, <span class="k">in</span> &lt;module&gt;
    import torch
  File <span class="s2">"/usr/local/lib64/python3.11/site-packages/torch/__init__.py"</span>, line 239, <span class="k">in</span> &lt;module&gt;
    from torch._C import <span class="k">*</span>  <span class="c"># noqa: F403</span>
    ^^^^^^^^^^^^^^^^^^^^^^
ImportError: libcupti.so.12: cannot open shared object file: No such file or directory
</code></pre></div></div>

<p>This issue is actually caused by PyTorch. Notice that almost everything is built on top of PyTorch, and PyTorch internally communicates with Nvidia GPU using CUDA.
<code class="language-plaintext highlighter-rouge">libcupti.so.12</code> is a lib file provided by CUDA.</p>

<p>The file may exist in your OS, but PyTorch somehow couldn’t find it. Use <code class="language-plaintext highlighter-rouge">find</code> to locate the lib file first:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>find / <span class="nt">-name</span> <span class="s2">"libcupti.so.12"</span>
<span class="c"># /usr/local/cuda-12.1/extras/CUPTI/lib64/libcupti.so.12</span>
</code></pre></div></div>

<p>Create symbolic link to python3.11 package path so that PyTorch can correctly open the lib files:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> /usr/local/lib64/python3.11/site-packages/nvidia/nccl/lib
<span class="nb">ln</span> <span class="nt">-s</span> /usr/local/cuda-12.1/extras/CUPTI/lib64 /usr/local/lib64/python3.11/site-packages/nvidia/nccl/lib

<span class="c"># just in case you want to remove the symlink:</span>
<span class="c"># unlink  /usr/local/lib64/python3.11/site-packages/nvidia/nccl/lib</span>
</code></pre></div></div>

<p>Before I tried the symlink approch, I did some research; some recommend setting <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code> env variable like below, but unfortunately, this doesn’t work for me.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span>/usr/local/cuda-12.1/extras/CUPTI/lib64/:<span class="nv">$LD_LIBRARY_PATH</span>
</code></pre></div></div>

<h4 id="2-pytorch---importerror-libncclso2-cannot-open-shared-object-file-no-such-file-or-directory">2. PyTorch - <code class="language-plaintext highlighter-rouge">ImportError: libnccl.so.2: cannot open shared object file: No such file or directory</code></h4>

<p>This is still a PyTorch problem, the output tracktrace is almost the same. This is due to incompatible PyTorch version.</p>

<p>Some recommend to simply downgrade the PyTorch version, or build the PyTorch on your own.</p>

<ul>
  <li>https://github.com/pytorch/pytorch/issues/88802</li>
  <li>https://discuss.pytorch.org/t/pytorch-for-cuda-12/169447/20?page=2</li>
</ul>

<p>So what I did was simply downgrading my PyTorch from <code class="language-plaintext highlighter-rouge">2.3.1</code> to <code class="language-plaintext highlighter-rouge">2.1.1</code>:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3.11 <span class="nt">-m</span> pip <span class="nb">install </span>torch-<span class="o">=</span>2.1.1
</code></pre></div></div>

<h4 id="3-pytorch---importerror-site-packagestorchliblibtorch_cudaso-undefined-symbol-ncclcommregister">3. PyTorch - <code class="language-plaintext highlighter-rouge">ImportError: .../site-packages/torch/lib/libtorch_cuda.so: undefined symbol: ncclCommRegister</code></h4>

<p>This issue arrived when I tried to downgrade PyTorch from <code class="language-plaintext highlighter-rouge">2.3.1</code> to <code class="language-plaintext highlighter-rouge">2.3.0</code>. This is due to incompatible PyTorch version.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">"/usr/local/lib/python3.11/site-packages/langchain_huggingface/embeddings/huggingface.py"</span>, line 53, <span class="k">in </span>__init__
    import sentence_transformers  <span class="c"># type: ignore[import]</span>
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File <span class="s2">"/usr/local/lib/python3.11/site-packages/sentence_transformers/__init__.py"</span>, line 7, <span class="k">in</span> &lt;module&gt;
    from sentence_transformers.cross_encoder.CrossEncoder import CrossEncoder
  File <span class="s2">"/usr/local/lib/python3.11/site-packages/sentence_transformers/cross_encoder/__init__.py"</span>, line 1, <span class="k">in</span> &lt;module&gt;
    from .CrossEncoder import CrossEncoder
  File <span class="s2">"/usr/local/lib/python3.11/site-packages/sentence_transformers/cross_encoder/CrossEncoder.py"</span>, line 7, <span class="k">in</span> &lt;module&gt;
    import torch
  File <span class="s2">"/usr/local/lib64/python3.11/site-packages/torch/__init__.py"</span>, line 237, <span class="k">in</span> &lt;module&gt;
    from torch._C import <span class="k">*</span>  <span class="c"># noqa: F403</span>
    ^^^^^^^^^^^^^^^^^^^^^^
ImportError: /usr/local/lib64/python3.11/site-packages/torch/lib/libtorch_cuda.so: undefined symbol: ncclCommRegister
</code></pre></div></div>

<p>The way you fix the problem is the same as the issue 2: downgrading your PyTorch to an older version like <code class="language-plaintext highlighter-rouge">2.1.1</code>.</p>

<h4 id="4-huggingface-connectivity-issue">4. HuggingFace Connectivity Issue.</h4>

<p>If you are from countries where HuggingFace is not really accesible. You can set <code class="language-plaintext highlighter-rouge">HF_ENDPOINT</code> environment variable to a mirror repo that is accessible from your country.</p>

<p>E.g.,</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">HF_ENDPOINT</span><span class="o">=</span>https://hf-mirror.com
</code></pre></div></div>

<h2 id="conceptual-guide">Conceptual Guide</h2>

<ul>
  <li><a href="https://python.langchain.com/v0.2/docs/concepts">LangChain - Conceptual Guide</a></li>
</ul>

<p>TODO:</p>

<h2 id="conversational-rag">Conversational RAG</h2>

<p>Conversational RAG maintains history of conversation.</p>

<ul>
  <li><a href="https://python.langchain.com/v0.2/docs/tutorials/qa_chat_history/">LangChain - Conversational RAG</a></li>
</ul>

<p>TODO: How to remmeber the chat history</p>

<h2 id="terminology">Terminology</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">HF Format</code>: Hugging Face Format</li>
</ul>]]></content><author><name>Yongjie Zhuang</name></author><category term="Learning" /><summary type="html"><![CDATA[Relevant Sites]]></summary></entry><entry><title type="html">moon - the private cloud</title><link href="https://curtisnewbie.github.io/projects/2024/06/03/moon-the-private-cloud.html" rel="alternate" type="text/html" title="moon - the private cloud" /><published>2024-06-03T18:00:00+08:00</published><updated>2024-06-03T18:00:00+08:00</updated><id>https://curtisnewbie.github.io/projects/2024/06/03/moon-the-private-cloud</id><content type="html" xml:base="https://curtisnewbie.github.io/projects/2024/06/03/moon-the-private-cloud.html"><![CDATA[<p>The moon project is self-hosted private cloud that consists of a set of backend and frontend services that I maintain in my spare time.</p>

<p>Monorepo: https://github.com/CurtisNewbie/moon-monorepo</p>

<!-- TODO talk about the monorepo -->]]></content><author><name>Yongjie Zhuang</name></author><category term="Projects" /><summary type="html"><![CDATA[The moon project is self-hosted private cloud that consists of a set of backend and frontend services that I maintain in my spare time.]]></summary></entry><entry><title type="html">Interesting Resources</title><link href="https://curtisnewbie.github.io/learning/2024/04/15/interesting-resources.html" rel="alternate" type="text/html" title="Interesting Resources" /><published>2024-04-15T20:00:00+08:00</published><updated>2024-04-15T20:00:00+08:00</updated><id>https://curtisnewbie.github.io/learning/2024/04/15/interesting-resources</id><content type="html" xml:base="https://curtisnewbie.github.io/learning/2024/04/15/interesting-resources.html"><![CDATA[<p>Interesting papers, books and websites are listed here.</p>

<h3 id="papers">Papers</h3>

<ul>
  <li><a href="https://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf">Dynamo: Amazon’s Highly Available Key-value Store</a></li>
</ul>

<h3 id="blogs-presentations-and-docs">Blogs, Presentations and Docs</h3>

<ul>
  <li><a href="https://ebpf-go.dev/">eBPF Library for Go</a></li>
  <li><a href="https://ebpf.io/what-is-ebpf">What is eBPF</a></li>
  <li><a href="https://www.infoq.com/presentations/shopify-architecture-flash-sale/">Shopify’s Architecture to Handle the World’s Biggest Flash Sales</a></li>
  <li><a href="https://martinfowler.com/articles/lmax.html">Martin Fowler - The LMAX Architecture</a></li>
  <li><a href="https://lmax-exchange.github.io/disruptor/">Github Page - LMAX Disruptor</a></li>
  <li><a href="https://dave.cheney.net/2013/06/02/why-is-a-goroutines-stack-infinite">Dave Cheney - Why is a Goroutine’s stack infinite?</a></li>
  <li><a href="https://docs.google.com/document/u/0/d/1yIAYmbvL3JxOKOjuCyon7JhW4cSv1wy5hC0ApeGMV9s/pub?pli=1">Go channels on steroids</a></li>
  <li><a href="https://benchmarksgame-team.pages.debian.net/benchmarksgame/index.html">The Computer Language Benchmark Game</a></li>
  <li><a href="https://docs.oracle.com/en/java/javase/20/gctuning/index.html#GUID-0394E76A-1A8F-425E-A0D0-B48A3DC82B42">jdk20 - HotSpot Virtual Machine Garbage Collection Tuning Guide</a></li>
  <li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/toc.html">jdk8 - Java Platform, Standard Edition Troubleshooting Guide</a></li>
  <li><a href="https://tschatzl.github.io/2022/08/04/concurrent-marking.html">Concurrent Marking in G1</a></li>
  <li><a href="https://landontclipp.github.io/blog/2023/07/15/analyzing-go-heap-escapes/#use-of-reflection">Analyzing Go Heap Escapes</a></li>
  <li><a href="https://chris124567.github.io/2021-06-21-go-performance/">Reducing Memory Allocations in Golang</a></li>
  <li><a href="https://github.com/redis/redis-specifications/blob/master/protocol/RESP2.md">Github - RESP2 Protocol Specification</a></li>
  <li><a href="https://medium.com/@chenymj23/diving-into-golang-how-does-it-effectively-wrap-the-functionality-of-epoll-26065f0654ba">Diving into Golang: How does it effectively wrap the functionality of epoll?</a></li>
  <li><a href="https://blog.mike.norgate.xyz/unlocking-go-slice-performance-navigating-sync-pool-for-enhanced-efficiency-7cb63b0b453e">Unlocking Go Slice Performance: Navigating sync.Pool for Enhanced Efficiency</a></li>
  <li><a href="https://gist.github.com/JBlond/2fea43a3049b38287e5e9cefc87b2124">JBlond Gist - Bash Colors</a></li>
  <li><a href="https://k3s.io/">k3s</a></li>
  <li><a href="https://blog.ragozin.info/2011/06/understanding-gc-pauses-in-jvm-hotspots.html">Understanding GC pauses in JVM, HotSpot’s minor GC (2011)</a></li>
  <li><a href="https://netflix.github.io/dgs/">Netflix DGS Framework</a></li>
  <li><a href="https://github.com/Netflix/conductor">Netflix Conductor</a></li>
  <li><a href="https://github.com/conductor-sdk/conductor-examples/tree/main">Conductor-sdk</a></li>
  <li><a href="https://orkes.io/content/">Orkes - Conductor</a></li>
  <li><a href="https://shipilev.net/jvm/anatomy-quarks/">JVM Anatomy Quarks</a></li>
  <li><a href="https://netflixtechblog.com/bending-pause-times-to-your-will-with-generational-zgc-256629c9386b">Netflix Technology Blog - Bending pause times to your will with Generational ZGC</a></li>
  <li><a href="https://www.infoq.com/presentations/netflix-java/">InfoQ - How Netflix Really Uses Java</a></li>
  <li><a href="https://go.dev/ref/spec">The Go Programming Language Specification</a></li>
  <li><a href="https://go.dev/doc/effective_go">Effective Go</a></li>
  <li><a href="https://go.dev/ref/mem">Go Memory Model</a></li>
  <li><a href="https://netflixtechblog.com/linux-performance-analysis-in-60-000-milliseconds-accc10403c55">Netflix Technology Blog - Linux Performance Analysis in 60,000 milliseconds</a></li>
  <li><a href="https://www.redhat.com/sysadmin/cgroups-part-one">A Linux sysadmin’s introduction to cgroups</a></li>
  <li><a href="https://www.cs.unh.edu/cnrg/people/gherrin/linux-net.html">Glenn Herrin (2000) Linux IP Networking</a></li>
  <li><a href="https://www.cloudcentric.dev/implementing-a-skip-list-in-go/">Implementing a skip list in go</a></li>
  <li><a href="https://github.com/redis/redis/blob/unstable/src/ziplist.c">ziplist.c source code in github.com/redis</a></li>
  <li><a href="https://eclipsesource.com/blogs/2013/01/21/10-tips-for-using-the-eclipse-memory-analyzer/">10 Tips for using the Eclipse Memory Analyzer</a></li>
  <li><a href="https://tikv.org/deep-dive/key-value-engine/b-tree-vs-lsm/">tikv - B-Tree vs LSM-Tree</a></li>
  <li><a href="https://medium.com/eureka-engineering/understanding-allocations-in-go-stack-heap-memory-9a2631b5035d">Understanding Allocations in Go</a></li>
  <li><a href="https://pkg.go.dev/cmd/trace">golang - cmd/trace</a></li>
  <li><a href="https://medium.com/@ankur_anand/a-visual-guide-to-golang-memory-allocator-from-ground-up-e132258453ed">A visual guide to Go Memory Allocator from scratch</a></li>
  <li><a href="https://java-decompiler.github.io/">Java Decompiler</a></li>
  <li><a href="https://catonmat.net/bash-one-liners-explained-part-one">Bash One-Liners Explained</a></li>
  <li><a href="https://tldp.org/HOWTO/IP-Masquerade-HOWTO/index.html">Linux IP Masquerade HOWTO, David A. Ranch</a></li>
  <li><a href="https://mysql.rjweb.org/doc.php/deletebig">MySQL Big DELETEs</a></li>
  <li><a href="https://research.swtch.com/interfaces">Go Data Structures: Interfaces</a></li>
  <li><a href="https://morsmachine.dk/go-scheduler">The Go Scheduler</a></li>
  <li><a href="https://www.kernel.org/doc/html/latest/index.html">Linux Kernel Documentation</a></li>
  <li><a href="https://thesecretlivesofdata.com/raft/">The Secret Lives of Data - Raft</a></li>
  <li>Posts, Blogs
    <ul>
      <li><a href="https://techurls.com/">techurls</a></li>
      <li><a href="https://news.ycombinator.com/">hacker news</a></li>
      <li><a href="https://bearblog.dev/discover/?page=1">bearblog</a></li>
    </ul>
  </li>
  <li><a href="https://bitfieldconsulting.com/posts/constraints">Constraints in Go</a></li>
  <li><a href="https://mightyohm.com/files/soldercomic/FullSolderComic_EN.pdf">Soldering is Easy: Here’s How to Do it (Extended Version)</a></li>
  <li><a href="https://htmx.org/essays/codin-dirty/">htmx - Codin’ Dirty</a></li>
  <li><a href="https://grugbrain.dev">The Grug Brained Developer A layman’s guide to thinking like the self-aware smol brained</a></li>
  <li><a href="https://assets.bitbashing.io/papers/concurrency-primer.pdf">Matt Kline - What every systems programmer should know about concurrency</a></li>
  <li><a href="https://redmonk.com/kholterhoff/2024/12/12/why-message-queues-endure-a-history/">Kate holterhoff - Why Message Queues Endure: A History</a></li>
  <li><a href="https://http3-explained.haxx.se/en">HTTP/3 Explained</a></li>
  <li><a href="https://daniel.haxx.se/http2/">HTTP/2 Explained</a></li>
  <li><a href="https://olano.dev/blog/software-design-is-knowledge-building/">Software Design Is Knowledge Building</a></li>
  <li><a href="https://arxiv.org/abs/2010.12597?ref=blog.sequinstream.com">Andreas Andreakis, Ioannis Papapanagiotou - DBLog: A Watermark Based Change-Data-Capture Framework</a></li>
  <li><a href="https://ffmpegbyexample.com/">FFmpeg by example</a></li>
  <li><a href="https://martinfowler.com/bliki/ConwaysLaw.html">Martin Fowler - Conways Law</a></li>
  <li><a href="https://andysblog.uk/why-blog-if-nobody-reads-it/">Andy’s Blog - Why Blog If Nobody Reads It?</a></li>
</ul>

<h3 id="database-related">Database Related</h3>

<ul>
  <li><a href="https://stackoverflow.com/questions/68443220/how-mvcc-works-with-lock-in-mysql">stackoverflow - how mvcc works with lock in mysql</a></li>
  <li><a href="https://jahfer.com/posts/innodb-locks/">jahfer.com - innodb-locks</a></li>
  <li><a href="https://dev.mysql.com/doc/refman/8.0/en/mysql-upgrade.html">mysql_upgrade tool for MySQL &lt; 8.0.16</a></li>
  <li><a href="https://dev.mysql.com/blog-archive/inplace-upgrade-from-mysql-5-7-to-mysql-8-0/">Inplace Upgrade MySQL 5.7 to 8.0</a></li>
  <li><a href="https://dev.mysql.com/doc/mysql-shell/8.0/en/mysql-shell-utilities-upgrade.html">MySQL Shell Upgrade Checker</a></li>
  <li><a href="https://github.com/dolthub/dolt">github dolthub/dolt</a></li>
  <li><a href="https://github.com/dolthub/go-mysql-server">github dolthub/go-mysql-server</a></li>
  <li><a href="https://github.blog/2018-06-20-mysql-high-availability-at-github/#:~:text=GitHub%20uses%20MySQL%20as%20its,is%20critical%20to%20GitHub's%20operation.">Github Blog - MySQL High Availability at Github</a></li>
  <li><a href="https://dev.mysql.com/doc/index-archive.html">MySQL Server Index Archive</a></li>
  <li><a href="https://dev.mysql.com/doc/dev/mysql-server/latest/">MySQL Server Source Code Documentation</a></li>
  <li><a href="https://dev.mysql.com/blog-archive/hash-join-in-mysql-8/">Hash join in MySQL 8</a></li>
  <li><a href="https://oceanbase.github.io/miniob/miniob-introduction.html">MiniOB Github Page - zh-cn</a></li>
  <li><a href="https://github.com/oceanbase/miniob?tab=readme-ov-file">MiniOB Github - zh-cn</a></li>
  <li><a href="https://github.com/oceanbase/oceanbase">Oceanbase Github</a></li>
  <li><a href="https://en.oceanbase.com/docs/oceanbase-database">Oceanbase Doc</a></li>
  <li><a href="https://use-the-index-luke.com/sql/preface">Use the index, Luke - A Guide to Database Performance for Developers</a></li>
  <li><a href="https://notes.eatonphil.com/2024-07-01-a-write-ahead-log-is-not-a-universal-part-of-durability.html">Eaton Phil, A write-ahead log is not a universal part of durability</a></li>
  <li><a href="https://stackoverflow.com/questions/4307464/how-are-internal-nodes-in-a-innodb-b-tree-physically-stored">StackOverflow - How are internal nodes in a innodb b-tree physically stored?</a></li>
  <li><a href="https://www.uber.com/en-JO/blog/upgrading-ubers-mysql-fleet/">Uber - Upgrading Ubers MySQL Fleet</a></li>
  <li><a href="https://briandouglas.ie/sqlite-defaults/">Brian Douglas - SQLite Defaults</a></li>
  <li><a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">Visualizing B+ Tree</a></li>
  <li><a href="https://avi.im/blag/2024/sqlite-facts/">Collection of insane and fun facts about SQLite</a></li>
  <li><a href="https://notes.eatonphil.com/2024-05-16-mvcc.html">Implementing MVCC and major SQL transaction isolation levels</a></li>
</ul>

<h3 id="other-github-repos">Other Github Repos</h3>

<ul>
  <li><a href="https://github.com/elastic/otel-profiling-agent">elastic/otel-profiling-agent</a></li>
  <li><a href="https://github.com/vadv/gopher-lua-libs">vadv/gopher-lua-libs</a></li>
  <li><a href="https://github.com/yuin/gopher-lua">yuin/gopher-lua</a></li>
  <li><a href="https://github.com/jamiebuilds/the-super-tiny-compiler">jamiebuilds/the-super-tiny-compiler</a></li>
  <li><a href="https://github.com/kjpgit/smallestcsvparser">kjpgit/SmallestCSVParser</a></li>
</ul>

<h3 id="perf">Perf</h3>

<ul>
  <li><a href="https://www.brendangregg.com/flamegraphs.html">Bred Angregg Flame Grphs</a></li>
  <li><a href="https://queue.acm.org/detail.cfm?id=2927301">Acm Queue - The Flame Graph</a></li>
  <li><a href="https://peteris.rocks/blog/htop/#htop-on-ubuntu-server-16-04-x64">peteris.rocks - htop explained</a></li>
</ul>

<h3 id="git">Git</h3>

<ul>
  <li><a href="https://jvns.ca/blog/2023/11/06/rebasing-what-can-go-wrong-/">Julia Evans - git rebase: what can go wrong?</a></li>
  <li><a href="https://stackoverflow.com/questions/5189560/how-do-i-squash-my-last-n-commits-together">StackOverflow - How do I squash my last N commits together?</a></li>
</ul>

<h3 id="golang">Golang</h3>

<ul>
  <li><a href="https://go.dev/blog/v2-go-modules">go.dev - Go Modules: v2 and Beyond</a></li>
  <li><a href="https://go.dev/doc/modules/developing">go.dev - Developing and publishing modules</a></li>
  <li><a href="https://100go.co/">100 Go Mistakes and How to Avoid Them</a></li>
  <li><a href="https://victoriametrics.com/blog/go-sync-mutex/">Phuong Le, Golang Sync Mutex: Normal and Starvation Mode</a></li>
  <li><a href="https://victoriametrics.com/blog/vendoring-go-mod-vendor/index.html">Phuong Le, Vendoring, or go mod vendor: What Is It?</a></li>
  <li><a href="https://research.swtch.com/godata">Go Data Structures</a></li>
</ul>

<h3 id="gc">GC</h3>

<ul>
  <li><a href="https://www.callibrity.com/articles/a-basic-overview-of-jvm-garbage-collection">Yan Yu - A Basic Overview of JVM Garbage Collection - Part 1</a></li>
  <li><a href="https://www.callibrity.com/articles/further-look-at-jvm-garbage-collection#:~:text=ParNew%20is%20the%20multi%2Dthreaded,%2C%20stop%20the%20world%2C%20etc.">Yan Yu - A Basic Overview of JVM Garbage Collection - Part 2</a></li>
  <li><a href="https://opensource.com/article/22/6/garbage-collection-java-virtual-machine">How Garbage Collection works inside a Java Virtual Machine</a></li>
  <li><a href="https://www.uber.com/blog/jvm-tuning-garbage-collection/">Uber - Tricks of the Trade: Tuning JVM Memory for Large-scale Services</a></li>
  <li><a href="https://www.uber.com/blog/scaling-hdfs/?uclick_id=b993a76e-eb97-4f64-b884-21e30bd60959">Uber - Scaling Uber’s Apache Hadoop Distributed File System for Growth</a></li>
  <li><a href="https://docs.oracle.com/en/java/javase/11/gctuning/introduction-garbage-collection-tuning.html#GUID-8A443184-7E07-4B71-9777-4F12947C8184">Java 11 - HotSpot Virtual Machine Garbage Collection Tuning Guide</a></li>
  <li><a href="https://www.infoq.com/articles/G1-One-Garbage-Collector-To-Rule-Them-All/">InfoQ - G1: One Garbage Collector To Rule Them All</a></li>
  <li><a href="https://www.infoq.com/articles/tuning-tips-G1-GC/">InfoQ - Tips for Tuning the Garbage First Garbage Collector</a></li>
  <li><a href="https://www.oracle.com/java/technologies/whitepaper.html#garbage">The Java HotSpot Performance Engine Architecture</a></li>
  <li><a href="https://www.oracle.com/technical-resources/articles/java/g1gc.html#:~:text=Initial%20mark%20phase%3A%20The%20G1,and%20marks%20the%20referenced%20objects.">Monica Beckwith (2013) Oracle - Garbage First Garbage Collector Tuning</a></li>
  <li><a href="https://www.oracle.com/technetwork/java/javase/memorymanagement-whitepaper-150215.pdf">Description of HotSpot GCs: Memory Management in the Java HotSpot Virtual Machine White Paper: link (PDF)</a></li>
  <li><a href="https://dl.acm.org/citation.cfm?id=362422.362480">The original CMS paper: Printezis, T. and Detlefs, D. 2000. A generational mostly-concurrent garbage collector. In Proceedings of the 2nd international Symposium on Memory Management (Minneapolis, Minnesota, United States, October 15 - 16, 2000).</a></li>
  <li><a href="https://dl.acm.org/citation.cfm?id=1029879">The original G1 paper: Detlefs, D., Flood, C., Heller, S., and Printezis, T. 2004. Garbage-first garbage collection. In Proceedings of the 4th international Symposium on Memory Management (Vancouver, BC, Canada, October 24 - 25, 2004).</a></li>
  <li><a href="https://www.researchgate.net/publication/221032945_Garbage-First_garbage_collection">ResearchGate - The original G1 paper: Detlefs, D., Flood, C., Heller, S., and Printezis, T. 2004. Garbage-first garbage collection. In Proceedings of the 4th international Symposium on Memory Management (Vancouver, BC, Canada, October 24 - 25, 2004).</a></li>
  <li><a href="https://www.redhat.com/en/blog/part-1-introduction-g1-garbage-collector">RedHat, Matt Robson - Part 1: Introduction to the G1 Garbage Collector</a></li>
  <li><a href="https://www.redhat.com/en/blog/collecting-and-reading-g1-garbage-collector-logs-part-2">RedHat, Matt Robson - Part 2: Collecting and reading G1 garbage collector logs</a></li>
  <li><a href="https://tech.meituan.com/2016/09/23/g1.html">美团技术团队 - Java Hotspot G1 GC 的一些关键技术</a></li>
  <li><a href="https://wiki.openjdk.org/display/shenandoah/Main">wiki.openjdk.org - shenandoah</a></li>
  <li><a href="https://go.dev/blog/ismmkeynote">The Go Blog - Getting to Go: The Journey of Go’s Garbage Collector</a></li>
</ul>

<h3 id="tools">Tools</h3>

<ul>
  <li><a href="https://mitmproxy.org/">mitproxy</a></li>
  <li><a href="https://github.com/gojue/ecapture">ecapture</a></li>
  <li><a href="https://www.tampermonkey.net/">Tampermonkey</a></li>
  <li><a href="https://www.tampermonkey.net/documentation.php">Tampermonkey API</a></li>
  <li><a href="https://javaparser.org/">javaparser.org</a>
    <ul>
      <li><a href="https://javaparser.org/setting-up-for-analysing-a-whole-project/">javaparser - Analysing an entire project in one go</a></li>
      <li><a href="https://github.com/javaparser/javaparser?tab=readme-ov-file">github.com/javaparser</a></li>
    </ul>
  </li>
  <li><a href="https://www.jdoodle.com/online-java-compiler">Online Java Compiler</a></li>
  <li><a href="https://www.peterbe.com/plog/set-ex">set -ex - The most useful bash trick of the year</a></li>
  <li><a href="https://diagon.arthursonzogni.com">ArthurSonzogni/Diagon WebApp - Generate ASCII Graph</a></li>
  <li><a href="https://github.com/ArthurSonzogni/Diagon?tab=readme-ov-file">ArthurSonzogni/Diagon Github - Generate ASCII Graph</a></li>
</ul>

<h3 id="typing">Typing</h3>

<ul>
  <li><a href="https://www.typelit.io/">typelit.io</a></li>
  <li><a href="https://keymash.io/">keymash.io</a></li>
  <li><a href="https://play.typeracer.com/">typeracer</a></li>
  <li><a href="https://zty.pe/">zty.pe</a></li>
</ul>

<h3 id="java-lambda--serialization">Java Lambda &amp; Serialization</h3>

<ul>
  <li><a href="https://blogs.oracle.com/javamagazine/post/behind-the-scenes-how-do-lambda-expressions-really-work-in-java">https://blogs.oracle.com/javamagazine/post/behind-the-scenes-how-do-lambda-expressions-really-work-in-java</a></li>
</ul>]]></content><author><name>Yongjie Zhuang</name></author><category term="Learning" /><summary type="html"><![CDATA[Interesting papers, books and websites are listed here.]]></summary></entry></feed>